
HAL_CAN_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000449c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800462c  0800462c  0000562c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046a0  080046a0  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080046a0  080046a0  000056a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046a8  080046a8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046a8  080046a8  000056a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046ac  080046ac  000056ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080046b0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000250  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ac  200002ac  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db73  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d12  00000000  00000000  00013bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d18  00000000  00000000  00015918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a3f  00000000  00000000  00016630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021470  00000000  00000000  0001706f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000defc  00000000  00000000  000384df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cda11  00000000  00000000  000463db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00113dec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003cec  00000000  00000000  00113e30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00117b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004614 	.word	0x08004614

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004614 	.word	0x08004614

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t is_data_received;
uint16_t distance;
uint16_t speed;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000578:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800057a:	4a0a      	ldr	r2, [pc, #40]	@ (80005a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800057c:	2100      	movs	r1, #0
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f000 ff9a 	bl	80014b8 <HAL_CAN_GetRxMessage>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d106      	bne.n	8000598 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
	{
		// process the message
        if (RxHeader.DLC == 2) {
 800058a:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800058c:	691b      	ldr	r3, [r3, #16]
 800058e:	2b02      	cmp	r3, #2
 8000590:	d102      	bne.n	8000598 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
        	is_data_received = 1;
 8000592:	4b05      	ldr	r3, [pc, #20]	@ (80005a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000594:	2201      	movs	r2, #1
 8000596:	701a      	strb	r2, [r3, #0]
        }
	}
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	2000014c 	.word	0x2000014c
 80005a4:	20000130 	.word	0x20000130
 80005a8:	20000154 	.word	0x20000154

080005ac <SetMotorSpeed>:

void SetMotorSpeed(uint16_t distance)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	80fb      	strh	r3, [r7, #6]
	speed = MIN_SPEED + ((distance - MIN_DIST) * (MAX_SPEED - MIN_SPEED) / (MAX_DIST - MIN_DIST));
 80005b6:	88fb      	ldrh	r3, [r7, #6]
 80005b8:	1f5a      	subs	r2, r3, #5
 80005ba:	4613      	mov	r3, r2
 80005bc:	011b      	lsls	r3, r3, #4
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	4a11      	ldr	r2, [pc, #68]	@ (8000608 <SetMotorSpeed+0x5c>)
 80005c4:	fb82 1203 	smull	r1, r2, r2, r3
 80005c8:	441a      	add	r2, r3
 80005ca:	1192      	asrs	r2, r2, #6
 80005cc:	17db      	asrs	r3, r3, #31
 80005ce:	1ad3      	subs	r3, r2, r3
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	3346      	adds	r3, #70	@ 0x46
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	4b0d      	ldr	r3, [pc, #52]	@ (800060c <SetMotorSpeed+0x60>)
 80005d8:	801a      	strh	r2, [r3, #0]
	//speed = ((distance - MIN_DIST)/(MAX_DIST - MIN_DIST)) * 100;
	if(speed > MAX_SPEED)
 80005da:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <SetMotorSpeed+0x60>)
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	2b64      	cmp	r3, #100	@ 0x64
 80005e0:	d902      	bls.n	80005e8 <SetMotorSpeed+0x3c>
	    speed = MAX_SPEED;
 80005e2:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <SetMotorSpeed+0x60>)
 80005e4:	2264      	movs	r2, #100	@ 0x64
 80005e6:	801a      	strh	r2, [r3, #0]
	//uint16_t pulsewidth  = (htim1.Init.Period + 1) * speed / 100;
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
	htim1.Instance->CCR1 = speed;
 80005e8:	4b08      	ldr	r3, [pc, #32]	@ (800060c <SetMotorSpeed+0x60>)
 80005ea:	881a      	ldrh	r2, [r3, #0]
 80005ec:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <SetMotorSpeed+0x64>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	635a      	str	r2, [r3, #52]	@ 0x34
	MotorStart(FORWARD);
 80005f2:	2001      	movs	r0, #1
 80005f4:	f000 f80e 	bl	8000614 <MotorStart>
	HAL_Delay(3000);
 80005f8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80005fc:	f000 fd18 	bl	8001030 <HAL_Delay>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	ac769185 	.word	0xac769185
 800060c:	20000158 	.word	0x20000158
 8000610:	200000a0 	.word	0x200000a0

08000614 <MotorStart>:

void MotorStart(uint16_t direction)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	80fb      	strh	r3, [r7, #6]
	if(direction == FORWARD)
 800061e:	88fb      	ldrh	r3, [r7, #6]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d10c      	bne.n	800063e <MotorStart+0x2a>
	{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800062a:	480e      	ldr	r0, [pc, #56]	@ (8000664 <MotorStart+0x50>)
 800062c:	f001 fd6a 	bl	8002104 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000636:	480b      	ldr	r0, [pc, #44]	@ (8000664 <MotorStart+0x50>)
 8000638:	f001 fd64 	bl	8002104 <HAL_GPIO_WritePin>
	else if(direction == BACKWARD)
	{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
	}
}
 800063c:	e00e      	b.n	800065c <MotorStart+0x48>
	else if(direction == BACKWARD)
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d10b      	bne.n	800065c <MotorStart+0x48>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800064a:	4806      	ldr	r0, [pc, #24]	@ (8000664 <MotorStart+0x50>)
 800064c:	f001 fd5a 	bl	8002104 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000656:	4803      	ldr	r0, [pc, #12]	@ (8000664 <MotorStart+0x50>)
 8000658:	f001 fd54 	bl	8002104 <HAL_GPIO_WritePin>
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000

08000668 <MotorStop>:

void MotorStop(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000672:	4805      	ldr	r0, [pc, #20]	@ (8000688 <MotorStop+0x20>)
 8000674:	f001 fd46 	bl	8002104 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800067e:	4802      	ldr	r0, [pc, #8]	@ (8000688 <MotorStop+0x20>)
 8000680:	f001 fd40 	bl	8002104 <HAL_GPIO_WritePin>
}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b092      	sub	sp, #72	@ 0x48
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	 char str[64];
	 char *str2 = "This is UART\r\n";
 8000692:	4b45      	ldr	r3, [pc, #276]	@ (80007a8 <main+0x11c>)
 8000694:	647b      	str	r3, [r7, #68]	@ 0x44
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000696:	f000 fc59 	bl	8000f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069a:	f000 f897 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069e:	f000 fa01 	bl	8000aa4 <MX_GPIO_Init>
  MX_CAN1_Init();
 80006a2:	f000 f8fd 	bl	80008a0 <MX_CAN1_Init>
  MX_TIM1_Init();
 80006a6:	f000 f951 	bl	800094c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80006aa:	f000 f9d1 	bl	8000a50 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 80006ae:	483f      	ldr	r0, [pc, #252]	@ (80007ac <main+0x120>)
 80006b0:	f000 febe 	bl	8001430 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80006b4:	2102      	movs	r1, #2
 80006b6:	483d      	ldr	r0, [pc, #244]	@ (80007ac <main+0x120>)
 80006b8:	f001 f820 	bl	80016fc <HAL_CAN_ActivateNotification>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006bc:	2100      	movs	r1, #0
 80006be:	483c      	ldr	r0, [pc, #240]	@ (80007b0 <main+0x124>)
 80006c0:	f002 fa22 	bl	8002b08 <HAL_TIM_PWM_Start>
  HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2), HAL_MAX_DELAY);
 80006c4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80006c6:	f7ff fd83 	bl	80001d0 <strlen>
 80006ca:	4603      	mov	r3, r0
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80006d4:	4837      	ldr	r0, [pc, #220]	@ (80007b4 <main+0x128>)
 80006d6:	f002 ff41 	bl	800355c <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 if(is_data_received == 1)
 80006da:	4b37      	ldr	r3, [pc, #220]	@ (80007b8 <main+0x12c>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d15e      	bne.n	80007a0 <main+0x114>
	 {
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006e8:	4834      	ldr	r0, [pc, #208]	@ (80007bc <main+0x130>)
 80006ea:	f001 fd0b 	bl	8002104 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f4:	4831      	ldr	r0, [pc, #196]	@ (80007bc <main+0x130>)
 80006f6:	f001 fd05 	bl	8002104 <HAL_GPIO_WritePin>
          distance = (uint16_t)RxData[0] << 8 | (uint16_t)RxData[1];
 80006fa:	4b31      	ldr	r3, [pc, #196]	@ (80007c0 <main+0x134>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	021b      	lsls	r3, r3, #8
 8000700:	b21a      	sxth	r2, r3
 8000702:	4b2f      	ldr	r3, [pc, #188]	@ (80007c0 <main+0x134>)
 8000704:	785b      	ldrb	r3, [r3, #1]
 8000706:	b21b      	sxth	r3, r3
 8000708:	4313      	orrs	r3, r2
 800070a:	b21b      	sxth	r3, r3
 800070c:	b29a      	uxth	r2, r3
 800070e:	4b2d      	ldr	r3, [pc, #180]	@ (80007c4 <main+0x138>)
 8000710:	801a      	strh	r2, [r3, #0]
          sprintf(str, "Distance : %d cm \r \n", distance);
 8000712:	4b2c      	ldr	r3, [pc, #176]	@ (80007c4 <main+0x138>)
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	492b      	ldr	r1, [pc, #172]	@ (80007c8 <main+0x13c>)
 800071c:	4618      	mov	r0, r3
 800071e:	f003 fad9 	bl	8003cd4 <siprintf>
      	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff fd53 	bl	80001d0 <strlen>
 800072a:	4603      	mov	r3, r0
 800072c:	b29a      	uxth	r2, r3
 800072e:	1d39      	adds	r1, r7, #4
 8000730:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000734:	481f      	ldr	r0, [pc, #124]	@ (80007b4 <main+0x128>)
 8000736:	f002 ff11 	bl	800355c <HAL_UART_Transmit>
          if(distance > 100)
 800073a:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <main+0x138>)
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	2b64      	cmp	r3, #100	@ 0x64
 8000740:	d908      	bls.n	8000754 <main+0xc8>
          {
        	  distance = 100;
 8000742:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <main+0x138>)
 8000744:	2264      	movs	r2, #100	@ 0x64
 8000746:	801a      	strh	r2, [r3, #0]
        	  SetMotorSpeed(distance);
 8000748:	4b1e      	ldr	r3, [pc, #120]	@ (80007c4 <main+0x138>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff2d 	bl	80005ac <SetMotorSpeed>
 8000752:	e01b      	b.n	800078c <main+0x100>
          }
          else if(distance <= 100 && distance > 5)
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <main+0x138>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	2b64      	cmp	r3, #100	@ 0x64
 800075a:	d809      	bhi.n	8000770 <main+0xe4>
 800075c:	4b19      	ldr	r3, [pc, #100]	@ (80007c4 <main+0x138>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	2b05      	cmp	r3, #5
 8000762:	d905      	bls.n	8000770 <main+0xe4>
          {
        	  SetMotorSpeed(distance);
 8000764:	4b17      	ldr	r3, [pc, #92]	@ (80007c4 <main+0x138>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ff1f 	bl	80005ac <SetMotorSpeed>
 800076e:	e00d      	b.n	800078c <main+0x100>
          }
          else
          {
        	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000776:	4811      	ldr	r0, [pc, #68]	@ (80007bc <main+0x130>)
 8000778:	f001 fcc4 	bl	8002104 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000782:	480e      	ldr	r0, [pc, #56]	@ (80007bc <main+0x130>)
 8000784:	f001 fcbe 	bl	8002104 <HAL_GPIO_WritePin>
        	  MotorStop();
 8000788:	f7ff ff6e 	bl	8000668 <MotorStop>
          }
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000792:	480a      	ldr	r0, [pc, #40]	@ (80007bc <main+0x130>)
 8000794:	f001 fcb6 	bl	8002104 <HAL_GPIO_WritePin>
          HAL_Delay(1000);
 8000798:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800079c:	f000 fc48 	bl	8001030 <HAL_Delay>
	 }
	 is_data_received = 0;
 80007a0:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <main+0x12c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
	 if(is_data_received == 1)
 80007a6:	e798      	b.n	80006da <main+0x4e>
 80007a8:	0800462c 	.word	0x0800462c
 80007ac:	20000078 	.word	0x20000078
 80007b0:	200000a0 	.word	0x200000a0
 80007b4:	200000e8 	.word	0x200000e8
 80007b8:	20000154 	.word	0x20000154
 80007bc:	40020c00 	.word	0x40020c00
 80007c0:	2000014c 	.word	0x2000014c
 80007c4:	20000156 	.word	0x20000156
 80007c8:	0800463c 	.word	0x0800463c

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b094      	sub	sp, #80	@ 0x50
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 0320 	add.w	r3, r7, #32
 80007d6:	2230      	movs	r2, #48	@ 0x30
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f003 fa9a 	bl	8003d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f0:	2300      	movs	r3, #0
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	4b28      	ldr	r3, [pc, #160]	@ (8000898 <SystemClock_Config+0xcc>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f8:	4a27      	ldr	r2, [pc, #156]	@ (8000898 <SystemClock_Config+0xcc>)
 80007fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000800:	4b25      	ldr	r3, [pc, #148]	@ (8000898 <SystemClock_Config+0xcc>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	4b22      	ldr	r3, [pc, #136]	@ (800089c <SystemClock_Config+0xd0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a21      	ldr	r2, [pc, #132]	@ (800089c <SystemClock_Config+0xd0>)
 8000816:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	4b1f      	ldr	r3, [pc, #124]	@ (800089c <SystemClock_Config+0xd0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000828:	2301      	movs	r3, #1
 800082a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800082c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000830:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000832:	2302      	movs	r3, #2
 8000834:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000836:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800083a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800083c:	2304      	movs	r3, #4
 800083e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000840:	2348      	movs	r3, #72	@ 0x48
 8000842:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000844:	2302      	movs	r3, #2
 8000846:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000848:	2307      	movs	r3, #7
 800084a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084c:	f107 0320 	add.w	r3, r7, #32
 8000850:	4618      	mov	r0, r3
 8000852:	f001 fc71 	bl	8002138 <HAL_RCC_OscConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800085c:	f000 f9a8 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000860:	230f      	movs	r3, #15
 8000862:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000864:	2302      	movs	r3, #2
 8000866:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800086c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000870:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000872:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000876:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	2102      	movs	r1, #2
 800087e:	4618      	mov	r0, r3
 8000880:	f001 fed2 	bl	8002628 <HAL_RCC_ClockConfig>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800088a:	f000 f991 	bl	8000bb0 <Error_Handler>
  }
}
 800088e:	bf00      	nop
 8000890:	3750      	adds	r7, #80	@ 0x50
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800
 800089c:	40007000 	.word	0x40007000

080008a0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	@ 0x28
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008a6:	4b27      	ldr	r3, [pc, #156]	@ (8000944 <MX_CAN1_Init+0xa4>)
 80008a8:	4a27      	ldr	r2, [pc, #156]	@ (8000948 <MX_CAN1_Init+0xa8>)
 80008aa:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 80008ac:	4b25      	ldr	r3, [pc, #148]	@ (8000944 <MX_CAN1_Init+0xa4>)
 80008ae:	2212      	movs	r2, #18
 80008b0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008b2:	4b24      	ldr	r3, [pc, #144]	@ (8000944 <MX_CAN1_Init+0xa4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008b8:	4b22      	ldr	r3, [pc, #136]	@ (8000944 <MX_CAN1_Init+0xa4>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80008be:	4b21      	ldr	r3, [pc, #132]	@ (8000944 <MX_CAN1_Init+0xa4>)
 80008c0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80008c4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000944 <MX_CAN1_Init+0xa4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000944 <MX_CAN1_Init+0xa4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000944 <MX_CAN1_Init+0xa4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000944 <MX_CAN1_Init+0xa4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008de:	4b19      	ldr	r3, [pc, #100]	@ (8000944 <MX_CAN1_Init+0xa4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008e4:	4b17      	ldr	r3, [pc, #92]	@ (8000944 <MX_CAN1_Init+0xa4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008ea:	4b16      	ldr	r3, [pc, #88]	@ (8000944 <MX_CAN1_Init+0xa4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008f0:	4814      	ldr	r0, [pc, #80]	@ (8000944 <MX_CAN1_Init+0xa4>)
 80008f2:	f000 fbc1 	bl	8001078 <HAL_CAN_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80008fc:	f000 f958 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef FilterConfig;
  //FilterConfig.SlaveStartFilterBank = 9; // CAN1-0 to 8, CAN2-9 to 27
  FilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000900:	2301      	movs	r3, #1
 8000902:	623b      	str	r3, [r7, #32]
  FilterConfig.FilterBank = 0; // Use any Filter from 0 to 8
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // Use a 32-bit filter
 8000908:	2301      	movs	r3, #1
 800090a:	61fb      	str	r3, [r7, #28]
  FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800090c:	2300      	movs	r3, #0
 800090e:	61bb      	str	r3, [r7, #24]
  FilterConfig.FilterMaskIdHigh = 0xFF00;
 8000910:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000914:	60bb      	str	r3, [r7, #8]
  FilterConfig.FilterMaskIdLow = 0x0000;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
  FilterConfig.FilterIdHigh = 0x1500;
 800091a:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 800091e:	603b      	str	r3, [r7, #0]
  FilterConfig.FilterIdLow = 0x0000;
 8000920:	2300      	movs	r3, #0
 8000922:	607b      	str	r3, [r7, #4]
  FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]

  if(HAL_CAN_ConfigFilter(&hcan1, &FilterConfig) != HAL_OK)
 8000928:	463b      	mov	r3, r7
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	@ (8000944 <MX_CAN1_Init+0xa4>)
 800092e:	f000 fc9f 	bl	8001270 <HAL_CAN_ConfigFilter>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_CAN1_Init+0x9c>
	  Error_Handler();
 8000938:	f000 f93a 	bl	8000bb0 <Error_Handler>
  /* USER CODE END CAN1_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	3728      	adds	r7, #40	@ 0x28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000078 	.word	0x20000078
 8000948:	40006400 	.word	0x40006400

0800094c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b092      	sub	sp, #72	@ 0x48
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000952:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800095c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
 800096c:	615a      	str	r2, [r3, #20]
 800096e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2220      	movs	r2, #32
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f003 f9cc 	bl	8003d14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800097c:	4b32      	ldr	r3, [pc, #200]	@ (8000a48 <MX_TIM1_Init+0xfc>)
 800097e:	4a33      	ldr	r2, [pc, #204]	@ (8000a4c <MX_TIM1_Init+0x100>)
 8000980:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000982:	4b31      	ldr	r3, [pc, #196]	@ (8000a48 <MX_TIM1_Init+0xfc>)
 8000984:	220f      	movs	r2, #15
 8000986:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000988:	4b2f      	ldr	r3, [pc, #188]	@ (8000a48 <MX_TIM1_Init+0xfc>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800098e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a48 <MX_TIM1_Init+0xfc>)
 8000990:	2263      	movs	r2, #99	@ 0x63
 8000992:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000994:	4b2c      	ldr	r3, [pc, #176]	@ (8000a48 <MX_TIM1_Init+0xfc>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800099a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a48 <MX_TIM1_Init+0xfc>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009a0:	4b29      	ldr	r3, [pc, #164]	@ (8000a48 <MX_TIM1_Init+0xfc>)
 80009a2:	2280      	movs	r2, #128	@ 0x80
 80009a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009a6:	4828      	ldr	r0, [pc, #160]	@ (8000a48 <MX_TIM1_Init+0xfc>)
 80009a8:	f002 f85e 	bl	8002a68 <HAL_TIM_PWM_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80009b2:	f000 f8fd 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b6:	2300      	movs	r3, #0
 80009b8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009be:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009c2:	4619      	mov	r1, r3
 80009c4:	4820      	ldr	r0, [pc, #128]	@ (8000a48 <MX_TIM1_Init+0xfc>)
 80009c6:	f002 fcab 	bl	8003320 <HAL_TIMEx_MasterConfigSynchronization>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80009d0:	f000 f8ee 	bl	8000bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009d4:	2360      	movs	r3, #96	@ 0x60
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009dc:	2300      	movs	r3, #0
 80009de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009e0:	2300      	movs	r3, #0
 80009e2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009e8:	2300      	movs	r3, #0
 80009ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009ec:	2300      	movs	r3, #0
 80009ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f4:	2200      	movs	r2, #0
 80009f6:	4619      	mov	r1, r3
 80009f8:	4813      	ldr	r0, [pc, #76]	@ (8000a48 <MX_TIM1_Init+0xfc>)
 80009fa:	f002 f94d 	bl	8002c98 <HAL_TIM_PWM_ConfigChannel>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000a04:	f000 f8d4 	bl	8000bb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a20:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4807      	ldr	r0, [pc, #28]	@ (8000a48 <MX_TIM1_Init+0xfc>)
 8000a2c:	f002 fcf4 	bl	8003418 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000a36:	f000 f8bb 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a3a:	4803      	ldr	r0, [pc, #12]	@ (8000a48 <MX_TIM1_Init+0xfc>)
 8000a3c:	f000 f958 	bl	8000cf0 <HAL_TIM_MspPostInit>

}
 8000a40:	bf00      	nop
 8000a42:	3748      	adds	r7, #72	@ 0x48
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	200000a0 	.word	0x200000a0
 8000a4c:	40010000 	.word	0x40010000

08000a50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a54:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	@ (8000aa0 <MX_USART2_UART_Init+0x50>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	@ (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a5c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a88:	f002 fd18 	bl	80034bc <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a92:	f000 f88d 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200000e8 	.word	0x200000e8
 8000aa0:	40004400 	.word	0x40004400

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	@ 0x28
 8000aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b39      	ldr	r3, [pc, #228]	@ (8000ba4 <MX_GPIO_Init+0x100>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a38      	ldr	r2, [pc, #224]	@ (8000ba4 <MX_GPIO_Init+0x100>)
 8000ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b36      	ldr	r3, [pc, #216]	@ (8000ba4 <MX_GPIO_Init+0x100>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	4b32      	ldr	r3, [pc, #200]	@ (8000ba4 <MX_GPIO_Init+0x100>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	4a31      	ldr	r2, [pc, #196]	@ (8000ba4 <MX_GPIO_Init+0x100>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae6:	4b2f      	ldr	r3, [pc, #188]	@ (8000ba4 <MX_GPIO_Init+0x100>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	4b2b      	ldr	r3, [pc, #172]	@ (8000ba4 <MX_GPIO_Init+0x100>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a2a      	ldr	r2, [pc, #168]	@ (8000ba4 <MX_GPIO_Init+0x100>)
 8000afc:	f043 0310 	orr.w	r3, r3, #16
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4b28      	ldr	r3, [pc, #160]	@ (8000ba4 <MX_GPIO_Init+0x100>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f003 0310 	and.w	r3, r3, #16
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b24      	ldr	r3, [pc, #144]	@ (8000ba4 <MX_GPIO_Init+0x100>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a23      	ldr	r2, [pc, #140]	@ (8000ba4 <MX_GPIO_Init+0x100>)
 8000b18:	f043 0308 	orr.w	r3, r3, #8
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ba4 <MX_GPIO_Init+0x100>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0308 	and.w	r3, r3, #8
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba4 <MX_GPIO_Init+0x100>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a1c      	ldr	r2, [pc, #112]	@ (8000ba4 <MX_GPIO_Init+0x100>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba4 <MX_GPIO_Init+0x100>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000b4c:	4816      	ldr	r0, [pc, #88]	@ (8000ba8 <MX_GPIO_Init+0x104>)
 8000b4e:	f001 fad9 	bl	8002104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8000b58:	4814      	ldr	r0, [pc, #80]	@ (8000bac <MX_GPIO_Init+0x108>)
 8000b5a:	f001 fad3 	bl	8002104 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE10 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b5e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	480c      	ldr	r0, [pc, #48]	@ (8000ba8 <MX_GPIO_Init+0x104>)
 8000b78:	f001 f928 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000b7c:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_GPIO_Init+0x108>)
 8000b96:	f001 f919 	bl	8001dcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b9a:	bf00      	nop
 8000b9c:	3728      	adds	r7, #40	@ 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40020c00 	.word	0x40020c00

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <Error_Handler+0x8>

08000bbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4b10      	ldr	r3, [pc, #64]	@ (8000c08 <HAL_MspInit+0x4c>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bca:	4a0f      	ldr	r2, [pc, #60]	@ (8000c08 <HAL_MspInit+0x4c>)
 8000bcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c08 <HAL_MspInit+0x4c>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <HAL_MspInit+0x4c>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be6:	4a08      	ldr	r2, [pc, #32]	@ (8000c08 <HAL_MspInit+0x4c>)
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bee:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <HAL_MspInit+0x4c>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bfa:	2007      	movs	r0, #7
 8000bfc:	f001 f8a4 	bl	8001d48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40023800 	.word	0x40023800

08000c0c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	@ 0x28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a1d      	ldr	r2, [pc, #116]	@ (8000ca0 <HAL_CAN_MspInit+0x94>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d134      	bne.n	8000c98 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <HAL_CAN_MspInit+0x98>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca4 <HAL_CAN_MspInit+0x98>)
 8000c38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <HAL_CAN_MspInit+0x98>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ca4 <HAL_CAN_MspInit+0x98>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	4a14      	ldr	r2, [pc, #80]	@ (8000ca4 <HAL_CAN_MspInit+0x98>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <HAL_CAN_MspInit+0x98>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c66:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c78:	2309      	movs	r3, #9
 8000c7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	4809      	ldr	r0, [pc, #36]	@ (8000ca8 <HAL_CAN_MspInit+0x9c>)
 8000c84:	f001 f8a2 	bl	8001dcc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2014      	movs	r0, #20
 8000c8e:	f001 f866 	bl	8001d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c92:	2014      	movs	r0, #20
 8000c94:	f001 f87f 	bl	8001d96 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000c98:	bf00      	nop
 8000c9a:	3728      	adds	r7, #40	@ 0x28
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40006400 	.word	0x40006400
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020400 	.word	0x40020400

08000cac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d10d      	bne.n	8000cda <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cec <HAL_TIM_PWM_MspInit+0x40>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc6:	4a09      	ldr	r2, [pc, #36]	@ (8000cec <HAL_TIM_PWM_MspInit+0x40>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cce:	4b07      	ldr	r3, [pc, #28]	@ (8000cec <HAL_TIM_PWM_MspInit+0x40>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000cda:	bf00      	nop
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40010000 	.word	0x40010000
 8000cec:	40023800 	.word	0x40023800

08000cf0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a12      	ldr	r2, [pc, #72]	@ (8000d58 <HAL_TIM_MspPostInit+0x68>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d11e      	bne.n	8000d50 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <HAL_TIM_MspPostInit+0x6c>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a10      	ldr	r2, [pc, #64]	@ (8000d5c <HAL_TIM_MspPostInit+0x6c>)
 8000d1c:	f043 0310 	orr.w	r3, r3, #16
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <HAL_TIM_MspPostInit+0x6c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	f003 0310 	and.w	r3, r3, #16
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d32:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d40:	2301      	movs	r3, #1
 8000d42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <HAL_TIM_MspPostInit+0x70>)
 8000d4c:	f001 f83e 	bl	8001dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d50:	bf00      	nop
 8000d52:	3720      	adds	r7, #32
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40010000 	.word	0x40010000
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40021000 	.word	0x40021000

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	@ 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a19      	ldr	r2, [pc, #100]	@ (8000de8 <HAL_UART_MspInit+0x84>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d12b      	bne.n	8000dde <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	4b18      	ldr	r3, [pc, #96]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8e:	4a17      	ldr	r2, [pc, #92]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d96:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a10      	ldr	r2, [pc, #64]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dbe:	230c      	movs	r3, #12
 8000dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dce:	2307      	movs	r3, #7
 8000dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <HAL_UART_MspInit+0x8c>)
 8000dda:	f000 fff7 	bl	8001dcc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000dde:	bf00      	nop
 8000de0:	3728      	adds	r7, #40	@ 0x28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40004400 	.word	0x40004400
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020000 	.word	0x40020000

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <NMI_Handler+0x4>

08000dfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <BusFault_Handler+0x4>

08000e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <UsageFault_Handler+0x4>

08000e1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e4a:	f000 f8d1 	bl	8000ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e58:	4802      	ldr	r0, [pc, #8]	@ (8000e64 <CAN1_RX0_IRQHandler+0x10>)
 8000e5a:	f000 fc75 	bl	8001748 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000078 	.word	0x20000078

08000e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e70:	4a14      	ldr	r2, [pc, #80]	@ (8000ec4 <_sbrk+0x5c>)
 8000e72:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <_sbrk+0x60>)
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e7c:	4b13      	ldr	r3, [pc, #76]	@ (8000ecc <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d102      	bne.n	8000e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e84:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <_sbrk+0x64>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	@ (8000ed0 <_sbrk+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d207      	bcs.n	8000ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e98:	f002 ff44 	bl	8003d24 <__errno>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ea6:	e009      	b.n	8000ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea8:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eae:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ecc <_sbrk+0x64>)
 8000eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eba:	68fb      	ldr	r3, [r7, #12]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20020000 	.word	0x20020000
 8000ec8:	00000400 	.word	0x00000400
 8000ecc:	2000015c 	.word	0x2000015c
 8000ed0:	200002b0 	.word	0x200002b0

08000ed4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed8:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <SystemInit+0x20>)
 8000eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ede:	4a05      	ldr	r2, [pc, #20]	@ (8000ef4 <SystemInit+0x20>)
 8000ee0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ee4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ef8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000efc:	f7ff ffea 	bl	8000ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f00:	480c      	ldr	r0, [pc, #48]	@ (8000f34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f02:	490d      	ldr	r1, [pc, #52]	@ (8000f38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f04:	4a0d      	ldr	r2, [pc, #52]	@ (8000f3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f08:	e002      	b.n	8000f10 <LoopCopyDataInit>

08000f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0e:	3304      	adds	r3, #4

08000f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f14:	d3f9      	bcc.n	8000f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f16:	4a0a      	ldr	r2, [pc, #40]	@ (8000f40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f18:	4c0a      	ldr	r4, [pc, #40]	@ (8000f44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f1c:	e001      	b.n	8000f22 <LoopFillZerobss>

08000f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f20:	3204      	adds	r2, #4

08000f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f24:	d3fb      	bcc.n	8000f1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f26:	f002 ff03 	bl	8003d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2a:	f7ff fbaf 	bl	800068c <main>
  bx  lr    
 8000f2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f38:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f3c:	080046b0 	.word	0x080046b0
  ldr r2, =_sbss
 8000f40:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f44:	200002ac 	.word	0x200002ac

08000f48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f48:	e7fe      	b.n	8000f48 <ADC_IRQHandler>
	...

08000f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f50:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <HAL_Init+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0d      	ldr	r2, [pc, #52]	@ (8000f8c <HAL_Init+0x40>)
 8000f56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <HAL_Init+0x40>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0a      	ldr	r2, [pc, #40]	@ (8000f8c <HAL_Init+0x40>)
 8000f62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f68:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <HAL_Init+0x40>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a07      	ldr	r2, [pc, #28]	@ (8000f8c <HAL_Init+0x40>)
 8000f6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f74:	2003      	movs	r0, #3
 8000f76:	f000 fee7 	bl	8001d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f000 f808 	bl	8000f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f80:	f7ff fe1c 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40023c00 	.word	0x40023c00

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f98:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <HAL_InitTick+0x54>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <HAL_InitTick+0x58>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 feff 	bl	8001db2 <HAL_SYSTICK_Config>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00e      	b.n	8000fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d80a      	bhi.n	8000fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fcc:	f000 fec7 	bl	8001d5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd0:	4a06      	ldr	r2, [pc, #24]	@ (8000fec <HAL_InitTick+0x5c>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e000      	b.n	8000fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	20000004 	.word	0x20000004

08000ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <HAL_IncTick+0x20>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <HAL_IncTick+0x24>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a04      	ldr	r2, [pc, #16]	@ (8001014 <HAL_IncTick+0x24>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000008 	.word	0x20000008
 8001014:	20000160 	.word	0x20000160

08001018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return uwTick;
 800101c:	4b03      	ldr	r3, [pc, #12]	@ (800102c <HAL_GetTick+0x14>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000160 	.word	0x20000160

08001030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001038:	f7ff ffee 	bl	8001018 <HAL_GetTick>
 800103c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001048:	d005      	beq.n	8001056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104a:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <HAL_Delay+0x44>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4413      	add	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001056:	bf00      	nop
 8001058:	f7ff ffde 	bl	8001018 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	429a      	cmp	r2, r3
 8001066:	d8f7      	bhi.n	8001058 <HAL_Delay+0x28>
  {
  }
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000008 	.word	0x20000008

08001078 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e0ed      	b.n	8001266 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d102      	bne.n	800109c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fdb8 	bl	8000c0c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f042 0201 	orr.w	r2, r2, #1
 80010aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010ac:	f7ff ffb4 	bl	8001018 <HAL_GetTick>
 80010b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010b2:	e012      	b.n	80010da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010b4:	f7ff ffb0 	bl	8001018 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b0a      	cmp	r3, #10
 80010c0:	d90b      	bls.n	80010da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2205      	movs	r2, #5
 80010d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e0c5      	b.n	8001266 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0e5      	beq.n	80010b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0202 	bic.w	r2, r2, #2
 80010f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010f8:	f7ff ff8e 	bl	8001018 <HAL_GetTick>
 80010fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010fe:	e012      	b.n	8001126 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001100:	f7ff ff8a 	bl	8001018 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b0a      	cmp	r3, #10
 800110c:	d90b      	bls.n	8001126 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001112:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2205      	movs	r2, #5
 800111e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e09f      	b.n	8001266 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1e5      	bne.n	8001100 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7e1b      	ldrb	r3, [r3, #24]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d108      	bne.n	800114e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	e007      	b.n	800115e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800115c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	7e5b      	ldrb	r3, [r3, #25]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d108      	bne.n	8001178 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	e007      	b.n	8001188 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001186:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	7e9b      	ldrb	r3, [r3, #26]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d108      	bne.n	80011a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0220 	orr.w	r2, r2, #32
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	e007      	b.n	80011b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 0220 	bic.w	r2, r2, #32
 80011b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	7edb      	ldrb	r3, [r3, #27]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d108      	bne.n	80011cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0210 	bic.w	r2, r2, #16
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	e007      	b.n	80011dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0210 	orr.w	r2, r2, #16
 80011da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7f1b      	ldrb	r3, [r3, #28]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d108      	bne.n	80011f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0208 	orr.w	r2, r2, #8
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	e007      	b.n	8001206 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 0208 	bic.w	r2, r2, #8
 8001204:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7f5b      	ldrb	r3, [r3, #29]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d108      	bne.n	8001220 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f042 0204 	orr.w	r2, r2, #4
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	e007      	b.n	8001230 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0204 	bic.w	r2, r2, #4
 800122e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	431a      	orrs	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	431a      	orrs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	ea42 0103 	orr.w	r1, r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	1e5a      	subs	r2, r3, #1
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	430a      	orrs	r2, r1
 8001254:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001270:	b480      	push	{r7}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001286:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001288:	7cfb      	ldrb	r3, [r7, #19]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d003      	beq.n	8001296 <HAL_CAN_ConfigFilter+0x26>
 800128e:	7cfb      	ldrb	r3, [r7, #19]
 8001290:	2b02      	cmp	r3, #2
 8001292:	f040 80be 	bne.w	8001412 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001296:	4b65      	ldr	r3, [pc, #404]	@ (800142c <HAL_CAN_ConfigFilter+0x1bc>)
 8001298:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80012a0:	f043 0201 	orr.w	r2, r3, #1
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80012b0:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	431a      	orrs	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	f003 031f 	and.w	r3, r3, #31
 80012d6:	2201      	movs	r2, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	401a      	ands	r2, r3
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	69db      	ldr	r3, [r3, #28]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d123      	bne.n	8001340 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	43db      	mvns	r3, r3
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800131a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	3248      	adds	r2, #72	@ 0x48
 8001320:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001334:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001336:	6979      	ldr	r1, [r7, #20]
 8001338:	3348      	adds	r3, #72	@ 0x48
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	440b      	add	r3, r1
 800133e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d122      	bne.n	800138e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	431a      	orrs	r2, r3
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001368:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	3248      	adds	r2, #72	@ 0x48
 800136e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001382:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001384:	6979      	ldr	r1, [r7, #20]
 8001386:	3348      	adds	r3, #72	@ 0x48
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	440b      	add	r3, r1
 800138c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d109      	bne.n	80013aa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	43db      	mvns	r3, r3
 80013a0:	401a      	ands	r2, r3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80013a8:	e007      	b.n	80013ba <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	431a      	orrs	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d109      	bne.n	80013d6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	401a      	ands	r2, r3
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80013d4:	e007      	b.n	80013e6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	431a      	orrs	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d107      	bne.n	80013fe <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	431a      	orrs	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001404:	f023 0201 	bic.w	r2, r3, #1
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e006      	b.n	8001420 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001416:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
  }
}
 8001420:	4618      	mov	r0, r3
 8001422:	371c      	adds	r7, #28
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	40006400 	.word	0x40006400

08001430 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b01      	cmp	r3, #1
 8001442:	d12e      	bne.n	80014a2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2202      	movs	r2, #2
 8001448:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0201 	bic.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800145c:	f7ff fddc 	bl	8001018 <HAL_GetTick>
 8001460:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001462:	e012      	b.n	800148a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001464:	f7ff fdd8 	bl	8001018 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b0a      	cmp	r3, #10
 8001470:	d90b      	bls.n	800148a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001476:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2205      	movs	r2, #5
 8001482:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e012      	b.n	80014b0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1e5      	bne.n	8001464 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	e006      	b.n	80014b0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
  }
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80014b8:	b480      	push	{r7}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014cc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80014ce:	7dfb      	ldrb	r3, [r7, #23]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d003      	beq.n	80014dc <HAL_CAN_GetRxMessage+0x24>
 80014d4:	7dfb      	ldrb	r3, [r7, #23]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	f040 8103 	bne.w	80016e2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10e      	bne.n	8001500 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d116      	bne.n	800151e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e0f7      	b.n	80016f0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d107      	bne.n	800151e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001512:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e0e8      	b.n	80016f0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	331b      	adds	r3, #27
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	4413      	add	r3, r2
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0204 	and.w	r2, r3, #4
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10c      	bne.n	8001556 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	331b      	adds	r3, #27
 8001544:	011b      	lsls	r3, r3, #4
 8001546:	4413      	add	r3, r2
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	0d5b      	lsrs	r3, r3, #21
 800154c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	e00b      	b.n	800156e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	331b      	adds	r3, #27
 800155e:	011b      	lsls	r3, r3, #4
 8001560:	4413      	add	r3, r2
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	08db      	lsrs	r3, r3, #3
 8001566:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	331b      	adds	r3, #27
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	4413      	add	r3, r2
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0202 	and.w	r2, r3, #2
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	331b      	adds	r3, #27
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	4413      	add	r3, r2
 8001590:	3304      	adds	r3, #4
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2208      	movs	r2, #8
 80015a0:	611a      	str	r2, [r3, #16]
 80015a2:	e00b      	b.n	80015bc <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	331b      	adds	r3, #27
 80015ac:	011b      	lsls	r3, r3, #4
 80015ae:	4413      	add	r3, r2
 80015b0:	3304      	adds	r3, #4
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 020f 	and.w	r2, r3, #15
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	331b      	adds	r3, #27
 80015c4:	011b      	lsls	r3, r3, #4
 80015c6:	4413      	add	r3, r2
 80015c8:	3304      	adds	r3, #4
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	331b      	adds	r3, #27
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	4413      	add	r3, r2
 80015e0:	3304      	adds	r3, #4
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	0c1b      	lsrs	r3, r3, #16
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	4413      	add	r3, r2
 80015f6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	011b      	lsls	r3, r3, #4
 800160a:	4413      	add	r3, r2
 800160c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	0a1a      	lsrs	r2, r3, #8
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	3301      	adds	r3, #1
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	4413      	add	r3, r2
 8001626:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	0c1a      	lsrs	r2, r3, #16
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	3302      	adds	r3, #2
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	011b      	lsls	r3, r3, #4
 800163e:	4413      	add	r3, r2
 8001640:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	0e1a      	lsrs	r2, r3, #24
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	3303      	adds	r3, #3
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	011b      	lsls	r3, r3, #4
 8001658:	4413      	add	r3, r2
 800165a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	3304      	adds	r3, #4
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	4413      	add	r3, r2
 8001672:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	0a1a      	lsrs	r2, r3, #8
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	3305      	adds	r3, #5
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	4413      	add	r3, r2
 800168c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	0c1a      	lsrs	r2, r3, #16
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	3306      	adds	r3, #6
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	011b      	lsls	r3, r3, #4
 80016a4:	4413      	add	r3, r2
 80016a6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	0e1a      	lsrs	r2, r3, #24
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	3307      	adds	r3, #7
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d108      	bne.n	80016ce <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 0220 	orr.w	r2, r2, #32
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	e007      	b.n	80016de <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	691a      	ldr	r2, [r3, #16]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f042 0220 	orr.w	r2, r2, #32
 80016dc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	e006      	b.n	80016f0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
  }
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	371c      	adds	r7, #28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800170c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d002      	beq.n	800171a <HAL_CAN_ActivateNotification+0x1e>
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d109      	bne.n	800172e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6959      	ldr	r1, [r3, #20]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	e006      	b.n	800173c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001732:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
  }
}
 800173c:	4618      	mov	r0, r3
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	@ 0x28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001750:	2300      	movs	r3, #0
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d07c      	beq.n	8001888 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b00      	cmp	r3, #0
 8001796:	d023      	beq.n	80017e0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2201      	movs	r2, #1
 800179e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f983 	bl	8001ab6 <HAL_CAN_TxMailbox0CompleteCallback>
 80017b0:	e016      	b.n	80017e0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d004      	beq.n	80017c6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80017bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017be:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017c4:	e00c      	b.n	80017e0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d004      	beq.n	80017da <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80017d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80017d8:	e002      	b.n	80017e0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f989 	bl	8001af2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d024      	beq.n	8001834 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f963 	bl	8001aca <HAL_CAN_TxMailbox1CompleteCallback>
 8001804:	e016      	b.n	8001834 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800180c:	2b00      	cmp	r3, #0
 800180e:	d004      	beq.n	800181a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001812:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001816:	627b      	str	r3, [r7, #36]	@ 0x24
 8001818:	e00c      	b.n	8001834 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001820:	2b00      	cmp	r3, #0
 8001822:	d004      	beq.n	800182e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001826:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24
 800182c:	e002      	b.n	8001834 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 f969 	bl	8001b06 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d024      	beq.n	8001888 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001846:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f943 	bl	8001ade <HAL_CAN_TxMailbox2CompleteCallback>
 8001858:	e016      	b.n	8001888 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d004      	beq.n	800186e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
 800186c:	e00c      	b.n	8001888 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d004      	beq.n	8001882 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001880:	e002      	b.n	8001888 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f949 	bl	8001b1a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00c      	beq.n	80018ac <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b00      	cmp	r3, #0
 800189a:	d007      	beq.n	80018ac <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800189c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2210      	movs	r2, #16
 80018aa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00b      	beq.n	80018ce <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f003 0308 	and.w	r3, r3, #8
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d006      	beq.n	80018ce <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2208      	movs	r2, #8
 80018c6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 f930 	bl	8001b2e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80018ce:	6a3b      	ldr	r3, [r7, #32]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d009      	beq.n	80018ec <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7fe fe42 	bl	8000570 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00c      	beq.n	8001910 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	f003 0310 	and.w	r3, r3, #16
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d007      	beq.n	8001910 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001902:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001906:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2210      	movs	r2, #16
 800190e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	f003 0320 	and.w	r3, r3, #32
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00b      	beq.n	8001932 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	2b00      	cmp	r3, #0
 8001922:	d006      	beq.n	8001932 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2208      	movs	r2, #8
 800192a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 f912 	bl	8001b56 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001932:	6a3b      	ldr	r3, [r7, #32]
 8001934:	f003 0310 	and.w	r3, r3, #16
 8001938:	2b00      	cmp	r3, #0
 800193a:	d009      	beq.n	8001950 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f8f9 	bl	8001b42 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00b      	beq.n	8001972 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	f003 0310 	and.w	r3, r3, #16
 8001960:	2b00      	cmp	r3, #0
 8001962:	d006      	beq.n	8001972 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2210      	movs	r2, #16
 800196a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 f8fc 	bl	8001b6a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00b      	beq.n	8001994 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d006      	beq.n	8001994 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2208      	movs	r2, #8
 800198c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f8f5 	bl	8001b7e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001994:	6a3b      	ldr	r3, [r7, #32]
 8001996:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d07b      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d072      	beq.n	8001a8e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d008      	beq.n	80019c4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80019bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d008      	beq.n	80019e0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80019d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019da:	f043 0302 	orr.w	r3, r3, #2
 80019de:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019e0:	6a3b      	ldr	r3, [r7, #32]
 80019e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d008      	beq.n	80019fc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80019f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d043      	beq.n	8001a8e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d03e      	beq.n	8001a8e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a16:	2b60      	cmp	r3, #96	@ 0x60
 8001a18:	d02b      	beq.n	8001a72 <HAL_CAN_IRQHandler+0x32a>
 8001a1a:	2b60      	cmp	r3, #96	@ 0x60
 8001a1c:	d82e      	bhi.n	8001a7c <HAL_CAN_IRQHandler+0x334>
 8001a1e:	2b50      	cmp	r3, #80	@ 0x50
 8001a20:	d022      	beq.n	8001a68 <HAL_CAN_IRQHandler+0x320>
 8001a22:	2b50      	cmp	r3, #80	@ 0x50
 8001a24:	d82a      	bhi.n	8001a7c <HAL_CAN_IRQHandler+0x334>
 8001a26:	2b40      	cmp	r3, #64	@ 0x40
 8001a28:	d019      	beq.n	8001a5e <HAL_CAN_IRQHandler+0x316>
 8001a2a:	2b40      	cmp	r3, #64	@ 0x40
 8001a2c:	d826      	bhi.n	8001a7c <HAL_CAN_IRQHandler+0x334>
 8001a2e:	2b30      	cmp	r3, #48	@ 0x30
 8001a30:	d010      	beq.n	8001a54 <HAL_CAN_IRQHandler+0x30c>
 8001a32:	2b30      	cmp	r3, #48	@ 0x30
 8001a34:	d822      	bhi.n	8001a7c <HAL_CAN_IRQHandler+0x334>
 8001a36:	2b10      	cmp	r3, #16
 8001a38:	d002      	beq.n	8001a40 <HAL_CAN_IRQHandler+0x2f8>
 8001a3a:	2b20      	cmp	r3, #32
 8001a3c:	d005      	beq.n	8001a4a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a3e:	e01d      	b.n	8001a7c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a42:	f043 0308 	orr.w	r3, r3, #8
 8001a46:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a48:	e019      	b.n	8001a7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4c:	f043 0310 	orr.w	r3, r3, #16
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a52:	e014      	b.n	8001a7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a56:	f043 0320 	orr.w	r3, r3, #32
 8001a5a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a5c:	e00f      	b.n	8001a7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a64:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a66:	e00a      	b.n	8001a7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a6e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a70:	e005      	b.n	8001a7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a7a:	e000      	b.n	8001a7e <HAL_CAN_IRQHandler+0x336>
            break;
 8001a7c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	699a      	ldr	r2, [r3, #24]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001a8c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2204      	movs	r2, #4
 8001a94:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d008      	beq.n	8001aae <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f872 	bl	8001b92 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001aae:	bf00      	nop
 8001ab0:	3728      	adds	r7, #40	@ 0x28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bec <__NVIC_SetPriorityGrouping+0x44>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bda:	4a04      	ldr	r2, [pc, #16]	@ (8001bec <__NVIC_SetPriorityGrouping+0x44>)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	60d3      	str	r3, [r2, #12]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf4:	4b04      	ldr	r3, [pc, #16]	@ (8001c08 <__NVIC_GetPriorityGrouping+0x18>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	0a1b      	lsrs	r3, r3, #8
 8001bfa:	f003 0307 	and.w	r3, r3, #7
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	db0b      	blt.n	8001c36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	f003 021f 	and.w	r2, r3, #31
 8001c24:	4907      	ldr	r1, [pc, #28]	@ (8001c44 <__NVIC_EnableIRQ+0x38>)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	095b      	lsrs	r3, r3, #5
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000e100 	.word	0xe000e100

08001c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6039      	str	r1, [r7, #0]
 8001c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	db0a      	blt.n	8001c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	490c      	ldr	r1, [pc, #48]	@ (8001c94 <__NVIC_SetPriority+0x4c>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	0112      	lsls	r2, r2, #4
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c70:	e00a      	b.n	8001c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4908      	ldr	r1, [pc, #32]	@ (8001c98 <__NVIC_SetPriority+0x50>)
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	3b04      	subs	r3, #4
 8001c80:	0112      	lsls	r2, r2, #4
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	440b      	add	r3, r1
 8001c86:	761a      	strb	r2, [r3, #24]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000e100 	.word	0xe000e100
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	@ 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f1c3 0307 	rsb	r3, r3, #7
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	bf28      	it	cs
 8001cba:	2304      	movcs	r3, #4
 8001cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	2b06      	cmp	r3, #6
 8001cc4:	d902      	bls.n	8001ccc <NVIC_EncodePriority+0x30>
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3b03      	subs	r3, #3
 8001cca:	e000      	b.n	8001cce <NVIC_EncodePriority+0x32>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	401a      	ands	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	4313      	orrs	r3, r2
         );
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3724      	adds	r7, #36	@ 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d14:	d301      	bcc.n	8001d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00f      	b.n	8001d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d44 <SysTick_Config+0x40>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d22:	210f      	movs	r1, #15
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d28:	f7ff ff8e 	bl	8001c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d2c:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <SysTick_Config+0x40>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d32:	4b04      	ldr	r3, [pc, #16]	@ (8001d44 <SysTick_Config+0x40>)
 8001d34:	2207      	movs	r2, #7
 8001d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	e000e010 	.word	0xe000e010

08001d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ff29 	bl	8001ba8 <__NVIC_SetPriorityGrouping>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d70:	f7ff ff3e 	bl	8001bf0 <__NVIC_GetPriorityGrouping>
 8001d74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	6978      	ldr	r0, [r7, #20]
 8001d7c:	f7ff ff8e 	bl	8001c9c <NVIC_EncodePriority>
 8001d80:	4602      	mov	r2, r0
 8001d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff5d 	bl	8001c48 <__NVIC_SetPriority>
}
 8001d8e:	bf00      	nop
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff31 	bl	8001c0c <__NVIC_EnableIRQ>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff ffa2 	bl	8001d04 <SysTick_Config>
 8001dc0:	4603      	mov	r3, r0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	@ 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	e16b      	b.n	80020c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001de8:	2201      	movs	r2, #1
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	f040 815a 	bne.w	80020ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d005      	beq.n	8001e1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d130      	bne.n	8001e80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	2203      	movs	r2, #3
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e54:	2201      	movs	r2, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 0201 	and.w	r2, r3, #1
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d017      	beq.n	8001ebc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	2203      	movs	r2, #3
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d123      	bne.n	8001f10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	08da      	lsrs	r2, r3, #3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3208      	adds	r2, #8
 8001ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	220f      	movs	r2, #15
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	08da      	lsrs	r2, r3, #3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3208      	adds	r2, #8
 8001f0a:	69b9      	ldr	r1, [r7, #24]
 8001f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0203 	and.w	r2, r3, #3
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 80b4 	beq.w	80020ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b60      	ldr	r3, [pc, #384]	@ (80020d8 <HAL_GPIO_Init+0x30c>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5a:	4a5f      	ldr	r2, [pc, #380]	@ (80020d8 <HAL_GPIO_Init+0x30c>)
 8001f5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f62:	4b5d      	ldr	r3, [pc, #372]	@ (80020d8 <HAL_GPIO_Init+0x30c>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f6e:	4a5b      	ldr	r2, [pc, #364]	@ (80020dc <HAL_GPIO_Init+0x310>)
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	089b      	lsrs	r3, r3, #2
 8001f74:	3302      	adds	r3, #2
 8001f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	220f      	movs	r2, #15
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a52      	ldr	r2, [pc, #328]	@ (80020e0 <HAL_GPIO_Init+0x314>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d02b      	beq.n	8001ff2 <HAL_GPIO_Init+0x226>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a51      	ldr	r2, [pc, #324]	@ (80020e4 <HAL_GPIO_Init+0x318>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d025      	beq.n	8001fee <HAL_GPIO_Init+0x222>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a50      	ldr	r2, [pc, #320]	@ (80020e8 <HAL_GPIO_Init+0x31c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d01f      	beq.n	8001fea <HAL_GPIO_Init+0x21e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a4f      	ldr	r2, [pc, #316]	@ (80020ec <HAL_GPIO_Init+0x320>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d019      	beq.n	8001fe6 <HAL_GPIO_Init+0x21a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a4e      	ldr	r2, [pc, #312]	@ (80020f0 <HAL_GPIO_Init+0x324>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d013      	beq.n	8001fe2 <HAL_GPIO_Init+0x216>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a4d      	ldr	r2, [pc, #308]	@ (80020f4 <HAL_GPIO_Init+0x328>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00d      	beq.n	8001fde <HAL_GPIO_Init+0x212>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4c      	ldr	r2, [pc, #304]	@ (80020f8 <HAL_GPIO_Init+0x32c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d007      	beq.n	8001fda <HAL_GPIO_Init+0x20e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a4b      	ldr	r2, [pc, #300]	@ (80020fc <HAL_GPIO_Init+0x330>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d101      	bne.n	8001fd6 <HAL_GPIO_Init+0x20a>
 8001fd2:	2307      	movs	r3, #7
 8001fd4:	e00e      	b.n	8001ff4 <HAL_GPIO_Init+0x228>
 8001fd6:	2308      	movs	r3, #8
 8001fd8:	e00c      	b.n	8001ff4 <HAL_GPIO_Init+0x228>
 8001fda:	2306      	movs	r3, #6
 8001fdc:	e00a      	b.n	8001ff4 <HAL_GPIO_Init+0x228>
 8001fde:	2305      	movs	r3, #5
 8001fe0:	e008      	b.n	8001ff4 <HAL_GPIO_Init+0x228>
 8001fe2:	2304      	movs	r3, #4
 8001fe4:	e006      	b.n	8001ff4 <HAL_GPIO_Init+0x228>
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e004      	b.n	8001ff4 <HAL_GPIO_Init+0x228>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e002      	b.n	8001ff4 <HAL_GPIO_Init+0x228>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <HAL_GPIO_Init+0x228>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	69fa      	ldr	r2, [r7, #28]
 8001ff6:	f002 0203 	and.w	r2, r2, #3
 8001ffa:	0092      	lsls	r2, r2, #2
 8001ffc:	4093      	lsls	r3, r2
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002004:	4935      	ldr	r1, [pc, #212]	@ (80020dc <HAL_GPIO_Init+0x310>)
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	089b      	lsrs	r3, r3, #2
 800200a:	3302      	adds	r3, #2
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002012:	4b3b      	ldr	r3, [pc, #236]	@ (8002100 <HAL_GPIO_Init+0x334>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002036:	4a32      	ldr	r2, [pc, #200]	@ (8002100 <HAL_GPIO_Init+0x334>)
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800203c:	4b30      	ldr	r3, [pc, #192]	@ (8002100 <HAL_GPIO_Init+0x334>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002060:	4a27      	ldr	r2, [pc, #156]	@ (8002100 <HAL_GPIO_Init+0x334>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002066:	4b26      	ldr	r3, [pc, #152]	@ (8002100 <HAL_GPIO_Init+0x334>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800208a:	4a1d      	ldr	r2, [pc, #116]	@ (8002100 <HAL_GPIO_Init+0x334>)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002090:	4b1b      	ldr	r3, [pc, #108]	@ (8002100 <HAL_GPIO_Init+0x334>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020b4:	4a12      	ldr	r2, [pc, #72]	@ (8002100 <HAL_GPIO_Init+0x334>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3301      	adds	r3, #1
 80020be:	61fb      	str	r3, [r7, #28]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	2b0f      	cmp	r3, #15
 80020c4:	f67f ae90 	bls.w	8001de8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	3724      	adds	r7, #36	@ 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40013800 	.word	0x40013800
 80020e0:	40020000 	.word	0x40020000
 80020e4:	40020400 	.word	0x40020400
 80020e8:	40020800 	.word	0x40020800
 80020ec:	40020c00 	.word	0x40020c00
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40021400 	.word	0x40021400
 80020f8:	40021800 	.word	0x40021800
 80020fc:	40021c00 	.word	0x40021c00
 8002100:	40013c00 	.word	0x40013c00

08002104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	807b      	strh	r3, [r7, #2]
 8002110:	4613      	mov	r3, r2
 8002112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002114:	787b      	ldrb	r3, [r7, #1]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800211a:	887a      	ldrh	r2, [r7, #2]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002120:	e003      	b.n	800212a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002122:	887b      	ldrh	r3, [r7, #2]
 8002124:	041a      	lsls	r2, r3, #16
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	619a      	str	r2, [r3, #24]
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e267      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d075      	beq.n	8002242 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002156:	4b88      	ldr	r3, [pc, #544]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	2b04      	cmp	r3, #4
 8002160:	d00c      	beq.n	800217c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002162:	4b85      	ldr	r3, [pc, #532]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800216a:	2b08      	cmp	r3, #8
 800216c:	d112      	bne.n	8002194 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800216e:	4b82      	ldr	r3, [pc, #520]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002176:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800217a:	d10b      	bne.n	8002194 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217c:	4b7e      	ldr	r3, [pc, #504]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d05b      	beq.n	8002240 <HAL_RCC_OscConfig+0x108>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d157      	bne.n	8002240 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e242      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800219c:	d106      	bne.n	80021ac <HAL_RCC_OscConfig+0x74>
 800219e:	4b76      	ldr	r3, [pc, #472]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a75      	ldr	r2, [pc, #468]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 80021a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e01d      	b.n	80021e8 <HAL_RCC_OscConfig+0xb0>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021b4:	d10c      	bne.n	80021d0 <HAL_RCC_OscConfig+0x98>
 80021b6:	4b70      	ldr	r3, [pc, #448]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a6f      	ldr	r2, [pc, #444]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 80021bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	4b6d      	ldr	r3, [pc, #436]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a6c      	ldr	r2, [pc, #432]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 80021c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	e00b      	b.n	80021e8 <HAL_RCC_OscConfig+0xb0>
 80021d0:	4b69      	ldr	r3, [pc, #420]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a68      	ldr	r2, [pc, #416]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 80021d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	4b66      	ldr	r3, [pc, #408]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a65      	ldr	r2, [pc, #404]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 80021e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d013      	beq.n	8002218 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7fe ff12 	bl	8001018 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f8:	f7fe ff0e 	bl	8001018 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	@ 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e207      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220a:	4b5b      	ldr	r3, [pc, #364]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0xc0>
 8002216:	e014      	b.n	8002242 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7fe fefe 	bl	8001018 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002220:	f7fe fefa 	bl	8001018 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	@ 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e1f3      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002232:	4b51      	ldr	r3, [pc, #324]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0xe8>
 800223e:	e000      	b.n	8002242 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d063      	beq.n	8002316 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800224e:	4b4a      	ldr	r3, [pc, #296]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00b      	beq.n	8002272 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800225a:	4b47      	ldr	r3, [pc, #284]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002262:	2b08      	cmp	r3, #8
 8002264:	d11c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002266:	4b44      	ldr	r3, [pc, #272]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d116      	bne.n	80022a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002272:	4b41      	ldr	r3, [pc, #260]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d005      	beq.n	800228a <HAL_RCC_OscConfig+0x152>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d001      	beq.n	800228a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e1c7      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228a:	4b3b      	ldr	r3, [pc, #236]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4937      	ldr	r1, [pc, #220]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229e:	e03a      	b.n	8002316 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d020      	beq.n	80022ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a8:	4b34      	ldr	r3, [pc, #208]	@ (800237c <HAL_RCC_OscConfig+0x244>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ae:	f7fe feb3 	bl	8001018 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b6:	f7fe feaf 	bl	8001018 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e1a8      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d4:	4b28      	ldr	r3, [pc, #160]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4925      	ldr	r1, [pc, #148]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	600b      	str	r3, [r1, #0]
 80022e8:	e015      	b.n	8002316 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ea:	4b24      	ldr	r3, [pc, #144]	@ (800237c <HAL_RCC_OscConfig+0x244>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7fe fe92 	bl	8001018 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f8:	f7fe fe8e 	bl	8001018 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e187      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230a:	4b1b      	ldr	r3, [pc, #108]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d036      	beq.n	8002390 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d016      	beq.n	8002358 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800232a:	4b15      	ldr	r3, [pc, #84]	@ (8002380 <HAL_RCC_OscConfig+0x248>)
 800232c:	2201      	movs	r2, #1
 800232e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002330:	f7fe fe72 	bl	8001018 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002338:	f7fe fe6e 	bl	8001018 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e167      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234a:	4b0b      	ldr	r3, [pc, #44]	@ (8002378 <HAL_RCC_OscConfig+0x240>)
 800234c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0x200>
 8002356:	e01b      	b.n	8002390 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002358:	4b09      	ldr	r3, [pc, #36]	@ (8002380 <HAL_RCC_OscConfig+0x248>)
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235e:	f7fe fe5b 	bl	8001018 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002364:	e00e      	b.n	8002384 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002366:	f7fe fe57 	bl	8001018 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d907      	bls.n	8002384 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e150      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
 8002378:	40023800 	.word	0x40023800
 800237c:	42470000 	.word	0x42470000
 8002380:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002384:	4b88      	ldr	r3, [pc, #544]	@ (80025a8 <HAL_RCC_OscConfig+0x470>)
 8002386:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1ea      	bne.n	8002366 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 8097 	beq.w	80024cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239e:	2300      	movs	r3, #0
 80023a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023a2:	4b81      	ldr	r3, [pc, #516]	@ (80025a8 <HAL_RCC_OscConfig+0x470>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10f      	bne.n	80023ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	4b7d      	ldr	r3, [pc, #500]	@ (80025a8 <HAL_RCC_OscConfig+0x470>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	4a7c      	ldr	r2, [pc, #496]	@ (80025a8 <HAL_RCC_OscConfig+0x470>)
 80023b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80023be:	4b7a      	ldr	r3, [pc, #488]	@ (80025a8 <HAL_RCC_OscConfig+0x470>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ca:	2301      	movs	r3, #1
 80023cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ce:	4b77      	ldr	r3, [pc, #476]	@ (80025ac <HAL_RCC_OscConfig+0x474>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d118      	bne.n	800240c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023da:	4b74      	ldr	r3, [pc, #464]	@ (80025ac <HAL_RCC_OscConfig+0x474>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a73      	ldr	r2, [pc, #460]	@ (80025ac <HAL_RCC_OscConfig+0x474>)
 80023e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023e6:	f7fe fe17 	bl	8001018 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ee:	f7fe fe13 	bl	8001018 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e10c      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002400:	4b6a      	ldr	r3, [pc, #424]	@ (80025ac <HAL_RCC_OscConfig+0x474>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0f0      	beq.n	80023ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d106      	bne.n	8002422 <HAL_RCC_OscConfig+0x2ea>
 8002414:	4b64      	ldr	r3, [pc, #400]	@ (80025a8 <HAL_RCC_OscConfig+0x470>)
 8002416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002418:	4a63      	ldr	r2, [pc, #396]	@ (80025a8 <HAL_RCC_OscConfig+0x470>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002420:	e01c      	b.n	800245c <HAL_RCC_OscConfig+0x324>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2b05      	cmp	r3, #5
 8002428:	d10c      	bne.n	8002444 <HAL_RCC_OscConfig+0x30c>
 800242a:	4b5f      	ldr	r3, [pc, #380]	@ (80025a8 <HAL_RCC_OscConfig+0x470>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800242e:	4a5e      	ldr	r2, [pc, #376]	@ (80025a8 <HAL_RCC_OscConfig+0x470>)
 8002430:	f043 0304 	orr.w	r3, r3, #4
 8002434:	6713      	str	r3, [r2, #112]	@ 0x70
 8002436:	4b5c      	ldr	r3, [pc, #368]	@ (80025a8 <HAL_RCC_OscConfig+0x470>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800243a:	4a5b      	ldr	r2, [pc, #364]	@ (80025a8 <HAL_RCC_OscConfig+0x470>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6713      	str	r3, [r2, #112]	@ 0x70
 8002442:	e00b      	b.n	800245c <HAL_RCC_OscConfig+0x324>
 8002444:	4b58      	ldr	r3, [pc, #352]	@ (80025a8 <HAL_RCC_OscConfig+0x470>)
 8002446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002448:	4a57      	ldr	r2, [pc, #348]	@ (80025a8 <HAL_RCC_OscConfig+0x470>)
 800244a:	f023 0301 	bic.w	r3, r3, #1
 800244e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002450:	4b55      	ldr	r3, [pc, #340]	@ (80025a8 <HAL_RCC_OscConfig+0x470>)
 8002452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002454:	4a54      	ldr	r2, [pc, #336]	@ (80025a8 <HAL_RCC_OscConfig+0x470>)
 8002456:	f023 0304 	bic.w	r3, r3, #4
 800245a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d015      	beq.n	8002490 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002464:	f7fe fdd8 	bl	8001018 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800246a:	e00a      	b.n	8002482 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246c:	f7fe fdd4 	bl	8001018 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e0cb      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002482:	4b49      	ldr	r3, [pc, #292]	@ (80025a8 <HAL_RCC_OscConfig+0x470>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0ee      	beq.n	800246c <HAL_RCC_OscConfig+0x334>
 800248e:	e014      	b.n	80024ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002490:	f7fe fdc2 	bl	8001018 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002496:	e00a      	b.n	80024ae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002498:	f7fe fdbe 	bl	8001018 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e0b5      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ae:	4b3e      	ldr	r3, [pc, #248]	@ (80025a8 <HAL_RCC_OscConfig+0x470>)
 80024b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1ee      	bne.n	8002498 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024ba:	7dfb      	ldrb	r3, [r7, #23]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d105      	bne.n	80024cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c0:	4b39      	ldr	r3, [pc, #228]	@ (80025a8 <HAL_RCC_OscConfig+0x470>)
 80024c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c4:	4a38      	ldr	r2, [pc, #224]	@ (80025a8 <HAL_RCC_OscConfig+0x470>)
 80024c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80a1 	beq.w	8002618 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024d6:	4b34      	ldr	r3, [pc, #208]	@ (80025a8 <HAL_RCC_OscConfig+0x470>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d05c      	beq.n	800259c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d141      	bne.n	800256e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ea:	4b31      	ldr	r3, [pc, #196]	@ (80025b0 <HAL_RCC_OscConfig+0x478>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7fe fd92 	bl	8001018 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f8:	f7fe fd8e 	bl	8001018 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e087      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250a:	4b27      	ldr	r3, [pc, #156]	@ (80025a8 <HAL_RCC_OscConfig+0x470>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69da      	ldr	r2, [r3, #28]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002524:	019b      	lsls	r3, r3, #6
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252c:	085b      	lsrs	r3, r3, #1
 800252e:	3b01      	subs	r3, #1
 8002530:	041b      	lsls	r3, r3, #16
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002538:	061b      	lsls	r3, r3, #24
 800253a:	491b      	ldr	r1, [pc, #108]	@ (80025a8 <HAL_RCC_OscConfig+0x470>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002540:	4b1b      	ldr	r3, [pc, #108]	@ (80025b0 <HAL_RCC_OscConfig+0x478>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002546:	f7fe fd67 	bl	8001018 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254e:	f7fe fd63 	bl	8001018 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e05c      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002560:	4b11      	ldr	r3, [pc, #68]	@ (80025a8 <HAL_RCC_OscConfig+0x470>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x416>
 800256c:	e054      	b.n	8002618 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256e:	4b10      	ldr	r3, [pc, #64]	@ (80025b0 <HAL_RCC_OscConfig+0x478>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7fe fd50 	bl	8001018 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257c:	f7fe fd4c 	bl	8001018 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e045      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258e:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <HAL_RCC_OscConfig+0x470>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x444>
 800259a:	e03d      	b.n	8002618 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d107      	bne.n	80025b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e038      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40007000 	.word	0x40007000
 80025b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002624 <HAL_RCC_OscConfig+0x4ec>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d028      	beq.n	8002614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d121      	bne.n	8002614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025da:	429a      	cmp	r2, r3
 80025dc:	d11a      	bne.n	8002614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025e4:	4013      	ands	r3, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d111      	bne.n	8002614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fa:	085b      	lsrs	r3, r3, #1
 80025fc:	3b01      	subs	r3, #1
 80025fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d107      	bne.n	8002614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800

08002628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0cc      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800263c:	4b68      	ldr	r3, [pc, #416]	@ (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d90c      	bls.n	8002664 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b65      	ldr	r3, [pc, #404]	@ (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002652:	4b63      	ldr	r3, [pc, #396]	@ (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0b8      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d020      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800267c:	4b59      	ldr	r3, [pc, #356]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	4a58      	ldr	r2, [pc, #352]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002686:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002694:	4b53      	ldr	r3, [pc, #332]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	4a52      	ldr	r2, [pc, #328]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800269e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a0:	4b50      	ldr	r3, [pc, #320]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	494d      	ldr	r1, [pc, #308]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d044      	beq.n	8002748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c6:	4b47      	ldr	r3, [pc, #284]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d119      	bne.n	8002706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e07f      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d003      	beq.n	80026e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d107      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e6:	4b3f      	ldr	r3, [pc, #252]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d109      	bne.n	8002706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e06f      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f6:	4b3b      	ldr	r3, [pc, #236]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e067      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002706:	4b37      	ldr	r3, [pc, #220]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f023 0203 	bic.w	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4934      	ldr	r1, [pc, #208]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	4313      	orrs	r3, r2
 8002716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002718:	f7fe fc7e 	bl	8001018 <HAL_GetTick>
 800271c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271e:	e00a      	b.n	8002736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002720:	f7fe fc7a 	bl	8001018 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e04f      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	4b2b      	ldr	r3, [pc, #172]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 020c 	and.w	r2, r3, #12
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	429a      	cmp	r2, r3
 8002746:	d1eb      	bne.n	8002720 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002748:	4b25      	ldr	r3, [pc, #148]	@ (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d20c      	bcs.n	8002770 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b22      	ldr	r3, [pc, #136]	@ (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	4b20      	ldr	r3, [pc, #128]	@ (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e032      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800277c:	4b19      	ldr	r3, [pc, #100]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4916      	ldr	r1, [pc, #88]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	4313      	orrs	r3, r2
 800278c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800279a:	4b12      	ldr	r3, [pc, #72]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	490e      	ldr	r1, [pc, #56]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ae:	f000 f821 	bl	80027f4 <HAL_RCC_GetSysClockFreq>
 80027b2:	4602      	mov	r2, r0
 80027b4:	4b0b      	ldr	r3, [pc, #44]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	490a      	ldr	r1, [pc, #40]	@ (80027e8 <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	5ccb      	ldrb	r3, [r1, r3]
 80027c2:	fa22 f303 	lsr.w	r3, r2, r3
 80027c6:	4a09      	ldr	r2, [pc, #36]	@ (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80027ca:	4b09      	ldr	r3, [pc, #36]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fbde 	bl	8000f90 <HAL_InitTick>

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40023c00 	.word	0x40023c00
 80027e4:	40023800 	.word	0x40023800
 80027e8:	08004654 	.word	0x08004654
 80027ec:	20000000 	.word	0x20000000
 80027f0:	20000004 	.word	0x20000004

080027f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027f8:	b094      	sub	sp, #80	@ 0x50
 80027fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800280c:	4b79      	ldr	r3, [pc, #484]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	2b08      	cmp	r3, #8
 8002816:	d00d      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0x40>
 8002818:	2b08      	cmp	r3, #8
 800281a:	f200 80e1 	bhi.w	80029e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <HAL_RCC_GetSysClockFreq+0x34>
 8002822:	2b04      	cmp	r3, #4
 8002824:	d003      	beq.n	800282e <HAL_RCC_GetSysClockFreq+0x3a>
 8002826:	e0db      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002828:	4b73      	ldr	r3, [pc, #460]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800282a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800282c:	e0db      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800282e:	4b73      	ldr	r3, [pc, #460]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x208>)
 8002830:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002832:	e0d8      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002834:	4b6f      	ldr	r3, [pc, #444]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800283c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800283e:	4b6d      	ldr	r3, [pc, #436]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d063      	beq.n	8002912 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800284a:	4b6a      	ldr	r3, [pc, #424]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	099b      	lsrs	r3, r3, #6
 8002850:	2200      	movs	r2, #0
 8002852:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002854:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800285c:	633b      	str	r3, [r7, #48]	@ 0x30
 800285e:	2300      	movs	r3, #0
 8002860:	637b      	str	r3, [r7, #52]	@ 0x34
 8002862:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002866:	4622      	mov	r2, r4
 8002868:	462b      	mov	r3, r5
 800286a:	f04f 0000 	mov.w	r0, #0
 800286e:	f04f 0100 	mov.w	r1, #0
 8002872:	0159      	lsls	r1, r3, #5
 8002874:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002878:	0150      	lsls	r0, r2, #5
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4621      	mov	r1, r4
 8002880:	1a51      	subs	r1, r2, r1
 8002882:	6139      	str	r1, [r7, #16]
 8002884:	4629      	mov	r1, r5
 8002886:	eb63 0301 	sbc.w	r3, r3, r1
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002898:	4659      	mov	r1, fp
 800289a:	018b      	lsls	r3, r1, #6
 800289c:	4651      	mov	r1, sl
 800289e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028a2:	4651      	mov	r1, sl
 80028a4:	018a      	lsls	r2, r1, #6
 80028a6:	4651      	mov	r1, sl
 80028a8:	ebb2 0801 	subs.w	r8, r2, r1
 80028ac:	4659      	mov	r1, fp
 80028ae:	eb63 0901 	sbc.w	r9, r3, r1
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028c6:	4690      	mov	r8, r2
 80028c8:	4699      	mov	r9, r3
 80028ca:	4623      	mov	r3, r4
 80028cc:	eb18 0303 	adds.w	r3, r8, r3
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	462b      	mov	r3, r5
 80028d4:	eb49 0303 	adc.w	r3, r9, r3
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028e6:	4629      	mov	r1, r5
 80028e8:	024b      	lsls	r3, r1, #9
 80028ea:	4621      	mov	r1, r4
 80028ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028f0:	4621      	mov	r1, r4
 80028f2:	024a      	lsls	r2, r1, #9
 80028f4:	4610      	mov	r0, r2
 80028f6:	4619      	mov	r1, r3
 80028f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028fa:	2200      	movs	r2, #0
 80028fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002900:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002904:	f7fd fcbc 	bl	8000280 <__aeabi_uldivmod>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4613      	mov	r3, r2
 800290e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002910:	e058      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002912:	4b38      	ldr	r3, [pc, #224]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	099b      	lsrs	r3, r3, #6
 8002918:	2200      	movs	r2, #0
 800291a:	4618      	mov	r0, r3
 800291c:	4611      	mov	r1, r2
 800291e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002922:	623b      	str	r3, [r7, #32]
 8002924:	2300      	movs	r3, #0
 8002926:	627b      	str	r3, [r7, #36]	@ 0x24
 8002928:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800292c:	4642      	mov	r2, r8
 800292e:	464b      	mov	r3, r9
 8002930:	f04f 0000 	mov.w	r0, #0
 8002934:	f04f 0100 	mov.w	r1, #0
 8002938:	0159      	lsls	r1, r3, #5
 800293a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800293e:	0150      	lsls	r0, r2, #5
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4641      	mov	r1, r8
 8002946:	ebb2 0a01 	subs.w	sl, r2, r1
 800294a:	4649      	mov	r1, r9
 800294c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800295c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002960:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002964:	ebb2 040a 	subs.w	r4, r2, sl
 8002968:	eb63 050b 	sbc.w	r5, r3, fp
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	00eb      	lsls	r3, r5, #3
 8002976:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800297a:	00e2      	lsls	r2, r4, #3
 800297c:	4614      	mov	r4, r2
 800297e:	461d      	mov	r5, r3
 8002980:	4643      	mov	r3, r8
 8002982:	18e3      	adds	r3, r4, r3
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	464b      	mov	r3, r9
 8002988:	eb45 0303 	adc.w	r3, r5, r3
 800298c:	607b      	str	r3, [r7, #4]
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	e9d7 4500 	ldrd	r4, r5, [r7]
 800299a:	4629      	mov	r1, r5
 800299c:	028b      	lsls	r3, r1, #10
 800299e:	4621      	mov	r1, r4
 80029a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029a4:	4621      	mov	r1, r4
 80029a6:	028a      	lsls	r2, r1, #10
 80029a8:	4610      	mov	r0, r2
 80029aa:	4619      	mov	r1, r3
 80029ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029ae:	2200      	movs	r2, #0
 80029b0:	61bb      	str	r3, [r7, #24]
 80029b2:	61fa      	str	r2, [r7, #28]
 80029b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029b8:	f7fd fc62 	bl	8000280 <__aeabi_uldivmod>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4613      	mov	r3, r2
 80029c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80029c4:	4b0b      	ldr	r3, [pc, #44]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	0c1b      	lsrs	r3, r3, #16
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	3301      	adds	r3, #1
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80029d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029de:	e002      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029e0:	4b05      	ldr	r3, [pc, #20]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80029e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3750      	adds	r7, #80	@ 0x50
 80029ec:	46bd      	mov	sp, r7
 80029ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029f2:	bf00      	nop
 80029f4:	40023800 	.word	0x40023800
 80029f8:	00f42400 	.word	0x00f42400
 80029fc:	007a1200 	.word	0x007a1200

08002a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a04:	4b03      	ldr	r3, [pc, #12]	@ (8002a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	20000000 	.word	0x20000000

08002a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a1c:	f7ff fff0 	bl	8002a00 <HAL_RCC_GetHCLKFreq>
 8002a20:	4602      	mov	r2, r0
 8002a22:	4b05      	ldr	r3, [pc, #20]	@ (8002a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	0a9b      	lsrs	r3, r3, #10
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	4903      	ldr	r1, [pc, #12]	@ (8002a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a2e:	5ccb      	ldrb	r3, [r1, r3]
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	08004664 	.word	0x08004664

08002a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a44:	f7ff ffdc 	bl	8002a00 <HAL_RCC_GetHCLKFreq>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	4b05      	ldr	r3, [pc, #20]	@ (8002a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	0b5b      	lsrs	r3, r3, #13
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	4903      	ldr	r1, [pc, #12]	@ (8002a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a56:	5ccb      	ldrb	r3, [r1, r3]
 8002a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40023800 	.word	0x40023800
 8002a64:	08004664 	.word	0x08004664

08002a68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e041      	b.n	8002afe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7fe f90c 	bl	8000cac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	f000 f9b8 	bl	8002e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d109      	bne.n	8002b2c <HAL_TIM_PWM_Start+0x24>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	bf14      	ite	ne
 8002b24:	2301      	movne	r3, #1
 8002b26:	2300      	moveq	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	e022      	b.n	8002b72 <HAL_TIM_PWM_Start+0x6a>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d109      	bne.n	8002b46 <HAL_TIM_PWM_Start+0x3e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	bf14      	ite	ne
 8002b3e:	2301      	movne	r3, #1
 8002b40:	2300      	moveq	r3, #0
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	e015      	b.n	8002b72 <HAL_TIM_PWM_Start+0x6a>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d109      	bne.n	8002b60 <HAL_TIM_PWM_Start+0x58>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	bf14      	ite	ne
 8002b58:	2301      	movne	r3, #1
 8002b5a:	2300      	moveq	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	e008      	b.n	8002b72 <HAL_TIM_PWM_Start+0x6a>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	bf14      	ite	ne
 8002b6c:	2301      	movne	r3, #1
 8002b6e:	2300      	moveq	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e07c      	b.n	8002c74 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d104      	bne.n	8002b8a <HAL_TIM_PWM_Start+0x82>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b88:	e013      	b.n	8002bb2 <HAL_TIM_PWM_Start+0xaa>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d104      	bne.n	8002b9a <HAL_TIM_PWM_Start+0x92>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b98:	e00b      	b.n	8002bb2 <HAL_TIM_PWM_Start+0xaa>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d104      	bne.n	8002baa <HAL_TIM_PWM_Start+0xa2>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ba8:	e003      	b.n	8002bb2 <HAL_TIM_PWM_Start+0xaa>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2202      	movs	r2, #2
 8002bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	6839      	ldr	r1, [r7, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fb8a 	bl	80032d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a2d      	ldr	r2, [pc, #180]	@ (8002c7c <HAL_TIM_PWM_Start+0x174>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d004      	beq.n	8002bd4 <HAL_TIM_PWM_Start+0xcc>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a2c      	ldr	r2, [pc, #176]	@ (8002c80 <HAL_TIM_PWM_Start+0x178>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d101      	bne.n	8002bd8 <HAL_TIM_PWM_Start+0xd0>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <HAL_TIM_PWM_Start+0xd2>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d007      	beq.n	8002bee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a22      	ldr	r2, [pc, #136]	@ (8002c7c <HAL_TIM_PWM_Start+0x174>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d022      	beq.n	8002c3e <HAL_TIM_PWM_Start+0x136>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c00:	d01d      	beq.n	8002c3e <HAL_TIM_PWM_Start+0x136>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a1f      	ldr	r2, [pc, #124]	@ (8002c84 <HAL_TIM_PWM_Start+0x17c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d018      	beq.n	8002c3e <HAL_TIM_PWM_Start+0x136>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1d      	ldr	r2, [pc, #116]	@ (8002c88 <HAL_TIM_PWM_Start+0x180>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d013      	beq.n	8002c3e <HAL_TIM_PWM_Start+0x136>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8002c8c <HAL_TIM_PWM_Start+0x184>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d00e      	beq.n	8002c3e <HAL_TIM_PWM_Start+0x136>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a16      	ldr	r2, [pc, #88]	@ (8002c80 <HAL_TIM_PWM_Start+0x178>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d009      	beq.n	8002c3e <HAL_TIM_PWM_Start+0x136>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a18      	ldr	r2, [pc, #96]	@ (8002c90 <HAL_TIM_PWM_Start+0x188>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d004      	beq.n	8002c3e <HAL_TIM_PWM_Start+0x136>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a16      	ldr	r2, [pc, #88]	@ (8002c94 <HAL_TIM_PWM_Start+0x18c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d111      	bne.n	8002c62 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2b06      	cmp	r3, #6
 8002c4e:	d010      	beq.n	8002c72 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c60:	e007      	b.n	8002c72 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 0201 	orr.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40010000 	.word	0x40010000
 8002c80:	40010400 	.word	0x40010400
 8002c84:	40000400 	.word	0x40000400
 8002c88:	40000800 	.word	0x40000800
 8002c8c:	40000c00 	.word	0x40000c00
 8002c90:	40014000 	.word	0x40014000
 8002c94:	40001800 	.word	0x40001800

08002c98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d101      	bne.n	8002cb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	e0ae      	b.n	8002e14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b0c      	cmp	r3, #12
 8002cc2:	f200 809f 	bhi.w	8002e04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8002ccc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ccc:	08002d01 	.word	0x08002d01
 8002cd0:	08002e05 	.word	0x08002e05
 8002cd4:	08002e05 	.word	0x08002e05
 8002cd8:	08002e05 	.word	0x08002e05
 8002cdc:	08002d41 	.word	0x08002d41
 8002ce0:	08002e05 	.word	0x08002e05
 8002ce4:	08002e05 	.word	0x08002e05
 8002ce8:	08002e05 	.word	0x08002e05
 8002cec:	08002d83 	.word	0x08002d83
 8002cf0:	08002e05 	.word	0x08002e05
 8002cf4:	08002e05 	.word	0x08002e05
 8002cf8:	08002e05 	.word	0x08002e05
 8002cfc:	08002dc3 	.word	0x08002dc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68b9      	ldr	r1, [r7, #8]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f934 	bl	8002f74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699a      	ldr	r2, [r3, #24]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0208 	orr.w	r2, r2, #8
 8002d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699a      	ldr	r2, [r3, #24]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0204 	bic.w	r2, r2, #4
 8002d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6999      	ldr	r1, [r3, #24]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	691a      	ldr	r2, [r3, #16]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	619a      	str	r2, [r3, #24]
      break;
 8002d3e:	e064      	b.n	8002e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 f984 	bl	8003054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6999      	ldr	r1, [r3, #24]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	021a      	lsls	r2, r3, #8
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	619a      	str	r2, [r3, #24]
      break;
 8002d80:	e043      	b.n	8002e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68b9      	ldr	r1, [r7, #8]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 f9d9 	bl	8003140 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	69da      	ldr	r2, [r3, #28]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f042 0208 	orr.w	r2, r2, #8
 8002d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	69da      	ldr	r2, [r3, #28]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0204 	bic.w	r2, r2, #4
 8002dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	69d9      	ldr	r1, [r3, #28]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	61da      	str	r2, [r3, #28]
      break;
 8002dc0:	e023      	b.n	8002e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68b9      	ldr	r1, [r7, #8]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 fa2d 	bl	8003228 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69da      	ldr	r2, [r3, #28]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69da      	ldr	r2, [r3, #28]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69d9      	ldr	r1, [r3, #28]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	021a      	lsls	r2, r3, #8
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	61da      	str	r2, [r3, #28]
      break;
 8002e02:	e002      	b.n	8002e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	75fb      	strb	r3, [r7, #23]
      break;
 8002e08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a46      	ldr	r2, [pc, #280]	@ (8002f48 <TIM_Base_SetConfig+0x12c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d013      	beq.n	8002e5c <TIM_Base_SetConfig+0x40>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e3a:	d00f      	beq.n	8002e5c <TIM_Base_SetConfig+0x40>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a43      	ldr	r2, [pc, #268]	@ (8002f4c <TIM_Base_SetConfig+0x130>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00b      	beq.n	8002e5c <TIM_Base_SetConfig+0x40>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a42      	ldr	r2, [pc, #264]	@ (8002f50 <TIM_Base_SetConfig+0x134>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d007      	beq.n	8002e5c <TIM_Base_SetConfig+0x40>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a41      	ldr	r2, [pc, #260]	@ (8002f54 <TIM_Base_SetConfig+0x138>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d003      	beq.n	8002e5c <TIM_Base_SetConfig+0x40>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a40      	ldr	r2, [pc, #256]	@ (8002f58 <TIM_Base_SetConfig+0x13c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d108      	bne.n	8002e6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a35      	ldr	r2, [pc, #212]	@ (8002f48 <TIM_Base_SetConfig+0x12c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d02b      	beq.n	8002ece <TIM_Base_SetConfig+0xb2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e7c:	d027      	beq.n	8002ece <TIM_Base_SetConfig+0xb2>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a32      	ldr	r2, [pc, #200]	@ (8002f4c <TIM_Base_SetConfig+0x130>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d023      	beq.n	8002ece <TIM_Base_SetConfig+0xb2>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a31      	ldr	r2, [pc, #196]	@ (8002f50 <TIM_Base_SetConfig+0x134>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d01f      	beq.n	8002ece <TIM_Base_SetConfig+0xb2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a30      	ldr	r2, [pc, #192]	@ (8002f54 <TIM_Base_SetConfig+0x138>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d01b      	beq.n	8002ece <TIM_Base_SetConfig+0xb2>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a2f      	ldr	r2, [pc, #188]	@ (8002f58 <TIM_Base_SetConfig+0x13c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d017      	beq.n	8002ece <TIM_Base_SetConfig+0xb2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a2e      	ldr	r2, [pc, #184]	@ (8002f5c <TIM_Base_SetConfig+0x140>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d013      	beq.n	8002ece <TIM_Base_SetConfig+0xb2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a2d      	ldr	r2, [pc, #180]	@ (8002f60 <TIM_Base_SetConfig+0x144>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00f      	beq.n	8002ece <TIM_Base_SetConfig+0xb2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a2c      	ldr	r2, [pc, #176]	@ (8002f64 <TIM_Base_SetConfig+0x148>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d00b      	beq.n	8002ece <TIM_Base_SetConfig+0xb2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a2b      	ldr	r2, [pc, #172]	@ (8002f68 <TIM_Base_SetConfig+0x14c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d007      	beq.n	8002ece <TIM_Base_SetConfig+0xb2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a2a      	ldr	r2, [pc, #168]	@ (8002f6c <TIM_Base_SetConfig+0x150>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d003      	beq.n	8002ece <TIM_Base_SetConfig+0xb2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a29      	ldr	r2, [pc, #164]	@ (8002f70 <TIM_Base_SetConfig+0x154>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d108      	bne.n	8002ee0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a10      	ldr	r2, [pc, #64]	@ (8002f48 <TIM_Base_SetConfig+0x12c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d003      	beq.n	8002f14 <TIM_Base_SetConfig+0xf8>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a12      	ldr	r2, [pc, #72]	@ (8002f58 <TIM_Base_SetConfig+0x13c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d103      	bne.n	8002f1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d105      	bne.n	8002f3a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f023 0201 	bic.w	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	611a      	str	r2, [r3, #16]
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40010000 	.word	0x40010000
 8002f4c:	40000400 	.word	0x40000400
 8002f50:	40000800 	.word	0x40000800
 8002f54:	40000c00 	.word	0x40000c00
 8002f58:	40010400 	.word	0x40010400
 8002f5c:	40014000 	.word	0x40014000
 8002f60:	40014400 	.word	0x40014400
 8002f64:	40014800 	.word	0x40014800
 8002f68:	40001800 	.word	0x40001800
 8002f6c:	40001c00 	.word	0x40001c00
 8002f70:	40002000 	.word	0x40002000

08002f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	f023 0201 	bic.w	r2, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0303 	bic.w	r3, r3, #3
 8002faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f023 0302 	bic.w	r3, r3, #2
 8002fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a20      	ldr	r2, [pc, #128]	@ (800304c <TIM_OC1_SetConfig+0xd8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d003      	beq.n	8002fd8 <TIM_OC1_SetConfig+0x64>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8003050 <TIM_OC1_SetConfig+0xdc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d10c      	bne.n	8002ff2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f023 0308 	bic.w	r3, r3, #8
 8002fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f023 0304 	bic.w	r3, r3, #4
 8002ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a15      	ldr	r2, [pc, #84]	@ (800304c <TIM_OC1_SetConfig+0xd8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d003      	beq.n	8003002 <TIM_OC1_SetConfig+0x8e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a14      	ldr	r2, [pc, #80]	@ (8003050 <TIM_OC1_SetConfig+0xdc>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d111      	bne.n	8003026 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	621a      	str	r2, [r3, #32]
}
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	40010000 	.word	0x40010000
 8003050:	40010400 	.word	0x40010400

08003054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	f023 0210 	bic.w	r2, r3, #16
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800308a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	021b      	lsls	r3, r3, #8
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4313      	orrs	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f023 0320 	bic.w	r3, r3, #32
 800309e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a22      	ldr	r2, [pc, #136]	@ (8003138 <TIM_OC2_SetConfig+0xe4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d003      	beq.n	80030bc <TIM_OC2_SetConfig+0x68>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a21      	ldr	r2, [pc, #132]	@ (800313c <TIM_OC2_SetConfig+0xe8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d10d      	bne.n	80030d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a17      	ldr	r2, [pc, #92]	@ (8003138 <TIM_OC2_SetConfig+0xe4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d003      	beq.n	80030e8 <TIM_OC2_SetConfig+0x94>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a16      	ldr	r2, [pc, #88]	@ (800313c <TIM_OC2_SetConfig+0xe8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d113      	bne.n	8003110 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	621a      	str	r2, [r3, #32]
}
 800312a:	bf00      	nop
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40010000 	.word	0x40010000
 800313c:	40010400 	.word	0x40010400

08003140 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800316e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0303 	bic.w	r3, r3, #3
 8003176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	021b      	lsls	r3, r3, #8
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a21      	ldr	r2, [pc, #132]	@ (8003220 <TIM_OC3_SetConfig+0xe0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d003      	beq.n	80031a6 <TIM_OC3_SetConfig+0x66>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a20      	ldr	r2, [pc, #128]	@ (8003224 <TIM_OC3_SetConfig+0xe4>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d10d      	bne.n	80031c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a16      	ldr	r2, [pc, #88]	@ (8003220 <TIM_OC3_SetConfig+0xe0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d003      	beq.n	80031d2 <TIM_OC3_SetConfig+0x92>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a15      	ldr	r2, [pc, #84]	@ (8003224 <TIM_OC3_SetConfig+0xe4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d113      	bne.n	80031fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80031e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	621a      	str	r2, [r3, #32]
}
 8003214:	bf00      	nop
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	40010000 	.word	0x40010000
 8003224:	40010400 	.word	0x40010400

08003228 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003228:	b480      	push	{r7}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800325e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4313      	orrs	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	031b      	lsls	r3, r3, #12
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a12      	ldr	r2, [pc, #72]	@ (80032cc <TIM_OC4_SetConfig+0xa4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d003      	beq.n	8003290 <TIM_OC4_SetConfig+0x68>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a11      	ldr	r2, [pc, #68]	@ (80032d0 <TIM_OC4_SetConfig+0xa8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d109      	bne.n	80032a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	019b      	lsls	r3, r3, #6
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	621a      	str	r2, [r3, #32]
}
 80032be:	bf00      	nop
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40010000 	.word	0x40010000
 80032d0:	40010400 	.word	0x40010400

080032d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f003 031f 	and.w	r3, r3, #31
 80032e6:	2201      	movs	r2, #1
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a1a      	ldr	r2, [r3, #32]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	401a      	ands	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a1a      	ldr	r2, [r3, #32]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 031f 	and.w	r3, r3, #31
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	fa01 f303 	lsl.w	r3, r1, r3
 800330c:	431a      	orrs	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	621a      	str	r2, [r3, #32]
}
 8003312:	bf00      	nop
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003334:	2302      	movs	r3, #2
 8003336:	e05a      	b.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800335e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a21      	ldr	r2, [pc, #132]	@ (80033fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d022      	beq.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003384:	d01d      	beq.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1d      	ldr	r2, [pc, #116]	@ (8003400 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d018      	beq.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a1b      	ldr	r2, [pc, #108]	@ (8003404 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d013      	beq.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a1a      	ldr	r2, [pc, #104]	@ (8003408 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00e      	beq.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a18      	ldr	r2, [pc, #96]	@ (800340c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d009      	beq.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a17      	ldr	r2, [pc, #92]	@ (8003410 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d004      	beq.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a15      	ldr	r2, [pc, #84]	@ (8003414 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d10c      	bne.n	80033dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40010000 	.word	0x40010000
 8003400:	40000400 	.word	0x40000400
 8003404:	40000800 	.word	0x40000800
 8003408:	40000c00 	.word	0x40000c00
 800340c:	40010400 	.word	0x40010400
 8003410:	40014000 	.word	0x40014000
 8003414:	40001800 	.word	0x40001800

08003418 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800342c:	2b01      	cmp	r3, #1
 800342e:	d101      	bne.n	8003434 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003430:	2302      	movs	r3, #2
 8003432:	e03d      	b.n	80034b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	4313      	orrs	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	4313      	orrs	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	4313      	orrs	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e042      	b.n	8003554 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d106      	bne.n	80034e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7fd fc3e 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2224      	movs	r2, #36	@ 0x24
 80034ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f973 	bl	80037ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003514:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695a      	ldr	r2, [r3, #20]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003524:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003534:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08a      	sub	sp, #40	@ 0x28
 8003560:	af02      	add	r7, sp, #8
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	4613      	mov	r3, r2
 800356a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b20      	cmp	r3, #32
 800357a:	d175      	bne.n	8003668 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <HAL_UART_Transmit+0x2c>
 8003582:	88fb      	ldrh	r3, [r7, #6]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e06e      	b.n	800366a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2221      	movs	r2, #33	@ 0x21
 8003596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800359a:	f7fd fd3d 	bl	8001018 <HAL_GetTick>
 800359e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	88fa      	ldrh	r2, [r7, #6]
 80035a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	88fa      	ldrh	r2, [r7, #6]
 80035aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035b4:	d108      	bne.n	80035c8 <HAL_UART_Transmit+0x6c>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d104      	bne.n	80035c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	61bb      	str	r3, [r7, #24]
 80035c6:	e003      	b.n	80035d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035d0:	e02e      	b.n	8003630 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2200      	movs	r2, #0
 80035da:	2180      	movs	r1, #128	@ 0x80
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 f848 	bl	8003672 <UART_WaitOnFlagUntilTimeout>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e03a      	b.n	800366a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10b      	bne.n	8003612 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	461a      	mov	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003608:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	3302      	adds	r3, #2
 800360e:	61bb      	str	r3, [r7, #24]
 8003610:	e007      	b.n	8003622 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	781a      	ldrb	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	3301      	adds	r3, #1
 8003620:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1cb      	bne.n	80035d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2200      	movs	r2, #0
 8003642:	2140      	movs	r1, #64	@ 0x40
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 f814 	bl	8003672 <UART_WaitOnFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d005      	beq.n	800365c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e006      	b.n	800366a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003664:	2300      	movs	r3, #0
 8003666:	e000      	b.n	800366a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003668:	2302      	movs	r3, #2
  }
}
 800366a:	4618      	mov	r0, r3
 800366c:	3720      	adds	r7, #32
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b086      	sub	sp, #24
 8003676:	af00      	add	r7, sp, #0
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	603b      	str	r3, [r7, #0]
 800367e:	4613      	mov	r3, r2
 8003680:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003682:	e03b      	b.n	80036fc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800368a:	d037      	beq.n	80036fc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368c:	f7fd fcc4 	bl	8001018 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	6a3a      	ldr	r2, [r7, #32]
 8003698:	429a      	cmp	r2, r3
 800369a:	d302      	bcc.n	80036a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e03a      	b.n	800371c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d023      	beq.n	80036fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2b80      	cmp	r3, #128	@ 0x80
 80036b8:	d020      	beq.n	80036fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b40      	cmp	r3, #64	@ 0x40
 80036be:	d01d      	beq.n	80036fc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d116      	bne.n	80036fc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f81d 	bl	8003724 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2208      	movs	r2, #8
 80036ee:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e00f      	b.n	800371c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	4013      	ands	r3, r2
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	429a      	cmp	r2, r3
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	429a      	cmp	r2, r3
 8003718:	d0b4      	beq.n	8003684 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003724:	b480      	push	{r7}
 8003726:	b095      	sub	sp, #84	@ 0x54
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	330c      	adds	r3, #12
 8003732:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003736:	e853 3f00 	ldrex	r3, [r3]
 800373a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800373c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003742:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	330c      	adds	r3, #12
 800374a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800374c:	643a      	str	r2, [r7, #64]	@ 0x40
 800374e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003750:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003752:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003754:	e841 2300 	strex	r3, r2, [r1]
 8003758:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800375a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e5      	bne.n	800372c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3314      	adds	r3, #20
 8003766:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	e853 3f00 	ldrex	r3, [r3]
 800376e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f023 0301 	bic.w	r3, r3, #1
 8003776:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3314      	adds	r3, #20
 800377e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003780:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003782:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003784:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003786:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003788:	e841 2300 	strex	r3, r2, [r1]
 800378c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800378e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1e5      	bne.n	8003760 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003798:	2b01      	cmp	r3, #1
 800379a:	d119      	bne.n	80037d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	330c      	adds	r3, #12
 80037a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	e853 3f00 	ldrex	r3, [r3]
 80037aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f023 0310 	bic.w	r3, r3, #16
 80037b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	330c      	adds	r3, #12
 80037ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037bc:	61ba      	str	r2, [r7, #24]
 80037be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c0:	6979      	ldr	r1, [r7, #20]
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	e841 2300 	strex	r3, r2, [r1]
 80037c8:	613b      	str	r3, [r7, #16]
   return(result);
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1e5      	bne.n	800379c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80037de:	bf00      	nop
 80037e0:	3754      	adds	r7, #84	@ 0x54
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
	...

080037ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037f0:	b0c0      	sub	sp, #256	@ 0x100
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003808:	68d9      	ldr	r1, [r3, #12]
 800380a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	ea40 0301 	orr.w	r3, r0, r1
 8003814:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	431a      	orrs	r2, r3
 8003824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	431a      	orrs	r2, r3
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003844:	f021 010c 	bic.w	r1, r1, #12
 8003848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003852:	430b      	orrs	r3, r1
 8003854:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003866:	6999      	ldr	r1, [r3, #24]
 8003868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	ea40 0301 	orr.w	r3, r0, r1
 8003872:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	4b8f      	ldr	r3, [pc, #572]	@ (8003ab8 <UART_SetConfig+0x2cc>)
 800387c:	429a      	cmp	r2, r3
 800387e:	d005      	beq.n	800388c <UART_SetConfig+0xa0>
 8003880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	4b8d      	ldr	r3, [pc, #564]	@ (8003abc <UART_SetConfig+0x2d0>)
 8003888:	429a      	cmp	r2, r3
 800388a:	d104      	bne.n	8003896 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800388c:	f7ff f8d8 	bl	8002a40 <HAL_RCC_GetPCLK2Freq>
 8003890:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003894:	e003      	b.n	800389e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003896:	f7ff f8bf 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 800389a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800389e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038a8:	f040 810c 	bne.w	8003ac4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038b0:	2200      	movs	r2, #0
 80038b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80038ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80038be:	4622      	mov	r2, r4
 80038c0:	462b      	mov	r3, r5
 80038c2:	1891      	adds	r1, r2, r2
 80038c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80038c6:	415b      	adcs	r3, r3
 80038c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038ce:	4621      	mov	r1, r4
 80038d0:	eb12 0801 	adds.w	r8, r2, r1
 80038d4:	4629      	mov	r1, r5
 80038d6:	eb43 0901 	adc.w	r9, r3, r1
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038ee:	4690      	mov	r8, r2
 80038f0:	4699      	mov	r9, r3
 80038f2:	4623      	mov	r3, r4
 80038f4:	eb18 0303 	adds.w	r3, r8, r3
 80038f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038fc:	462b      	mov	r3, r5
 80038fe:	eb49 0303 	adc.w	r3, r9, r3
 8003902:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003912:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003916:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800391a:	460b      	mov	r3, r1
 800391c:	18db      	adds	r3, r3, r3
 800391e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003920:	4613      	mov	r3, r2
 8003922:	eb42 0303 	adc.w	r3, r2, r3
 8003926:	657b      	str	r3, [r7, #84]	@ 0x54
 8003928:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800392c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003930:	f7fc fca6 	bl	8000280 <__aeabi_uldivmod>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4b61      	ldr	r3, [pc, #388]	@ (8003ac0 <UART_SetConfig+0x2d4>)
 800393a:	fba3 2302 	umull	r2, r3, r3, r2
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	011c      	lsls	r4, r3, #4
 8003942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003946:	2200      	movs	r2, #0
 8003948:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800394c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003950:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003954:	4642      	mov	r2, r8
 8003956:	464b      	mov	r3, r9
 8003958:	1891      	adds	r1, r2, r2
 800395a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800395c:	415b      	adcs	r3, r3
 800395e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003960:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003964:	4641      	mov	r1, r8
 8003966:	eb12 0a01 	adds.w	sl, r2, r1
 800396a:	4649      	mov	r1, r9
 800396c:	eb43 0b01 	adc.w	fp, r3, r1
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800397c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003980:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003984:	4692      	mov	sl, r2
 8003986:	469b      	mov	fp, r3
 8003988:	4643      	mov	r3, r8
 800398a:	eb1a 0303 	adds.w	r3, sl, r3
 800398e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003992:	464b      	mov	r3, r9
 8003994:	eb4b 0303 	adc.w	r3, fp, r3
 8003998:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800399c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80039ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039b0:	460b      	mov	r3, r1
 80039b2:	18db      	adds	r3, r3, r3
 80039b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80039b6:	4613      	mov	r3, r2
 80039b8:	eb42 0303 	adc.w	r3, r2, r3
 80039bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80039be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80039c6:	f7fc fc5b 	bl	8000280 <__aeabi_uldivmod>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	4611      	mov	r1, r2
 80039d0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ac0 <UART_SetConfig+0x2d4>)
 80039d2:	fba3 2301 	umull	r2, r3, r3, r1
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	2264      	movs	r2, #100	@ 0x64
 80039da:	fb02 f303 	mul.w	r3, r2, r3
 80039de:	1acb      	subs	r3, r1, r3
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80039e6:	4b36      	ldr	r3, [pc, #216]	@ (8003ac0 <UART_SetConfig+0x2d4>)
 80039e8:	fba3 2302 	umull	r2, r3, r3, r2
 80039ec:	095b      	lsrs	r3, r3, #5
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80039f4:	441c      	add	r4, r3
 80039f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039fa:	2200      	movs	r2, #0
 80039fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a00:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003a08:	4642      	mov	r2, r8
 8003a0a:	464b      	mov	r3, r9
 8003a0c:	1891      	adds	r1, r2, r2
 8003a0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a10:	415b      	adcs	r3, r3
 8003a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a18:	4641      	mov	r1, r8
 8003a1a:	1851      	adds	r1, r2, r1
 8003a1c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a1e:	4649      	mov	r1, r9
 8003a20:	414b      	adcs	r3, r1
 8003a22:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a30:	4659      	mov	r1, fp
 8003a32:	00cb      	lsls	r3, r1, #3
 8003a34:	4651      	mov	r1, sl
 8003a36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a3a:	4651      	mov	r1, sl
 8003a3c:	00ca      	lsls	r2, r1, #3
 8003a3e:	4610      	mov	r0, r2
 8003a40:	4619      	mov	r1, r3
 8003a42:	4603      	mov	r3, r0
 8003a44:	4642      	mov	r2, r8
 8003a46:	189b      	adds	r3, r3, r2
 8003a48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a4c:	464b      	mov	r3, r9
 8003a4e:	460a      	mov	r2, r1
 8003a50:	eb42 0303 	adc.w	r3, r2, r3
 8003a54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a64:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	18db      	adds	r3, r3, r3
 8003a70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a72:	4613      	mov	r3, r2
 8003a74:	eb42 0303 	adc.w	r3, r2, r3
 8003a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a82:	f7fc fbfd 	bl	8000280 <__aeabi_uldivmod>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac0 <UART_SetConfig+0x2d4>)
 8003a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a90:	095b      	lsrs	r3, r3, #5
 8003a92:	2164      	movs	r1, #100	@ 0x64
 8003a94:	fb01 f303 	mul.w	r3, r1, r3
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	3332      	adds	r3, #50	@ 0x32
 8003a9e:	4a08      	ldr	r2, [pc, #32]	@ (8003ac0 <UART_SetConfig+0x2d4>)
 8003aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa4:	095b      	lsrs	r3, r3, #5
 8003aa6:	f003 0207 	and.w	r2, r3, #7
 8003aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4422      	add	r2, r4
 8003ab2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ab4:	e106      	b.n	8003cc4 <UART_SetConfig+0x4d8>
 8003ab6:	bf00      	nop
 8003ab8:	40011000 	.word	0x40011000
 8003abc:	40011400 	.word	0x40011400
 8003ac0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ace:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ad2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ad6:	4642      	mov	r2, r8
 8003ad8:	464b      	mov	r3, r9
 8003ada:	1891      	adds	r1, r2, r2
 8003adc:	6239      	str	r1, [r7, #32]
 8003ade:	415b      	adcs	r3, r3
 8003ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ae6:	4641      	mov	r1, r8
 8003ae8:	1854      	adds	r4, r2, r1
 8003aea:	4649      	mov	r1, r9
 8003aec:	eb43 0501 	adc.w	r5, r3, r1
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	00eb      	lsls	r3, r5, #3
 8003afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003afe:	00e2      	lsls	r2, r4, #3
 8003b00:	4614      	mov	r4, r2
 8003b02:	461d      	mov	r5, r3
 8003b04:	4643      	mov	r3, r8
 8003b06:	18e3      	adds	r3, r4, r3
 8003b08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b0c:	464b      	mov	r3, r9
 8003b0e:	eb45 0303 	adc.w	r3, r5, r3
 8003b12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b22:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b32:	4629      	mov	r1, r5
 8003b34:	008b      	lsls	r3, r1, #2
 8003b36:	4621      	mov	r1, r4
 8003b38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b3c:	4621      	mov	r1, r4
 8003b3e:	008a      	lsls	r2, r1, #2
 8003b40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b44:	f7fc fb9c 	bl	8000280 <__aeabi_uldivmod>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4b60      	ldr	r3, [pc, #384]	@ (8003cd0 <UART_SetConfig+0x4e4>)
 8003b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	011c      	lsls	r4, r3, #4
 8003b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b60:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b68:	4642      	mov	r2, r8
 8003b6a:	464b      	mov	r3, r9
 8003b6c:	1891      	adds	r1, r2, r2
 8003b6e:	61b9      	str	r1, [r7, #24]
 8003b70:	415b      	adcs	r3, r3
 8003b72:	61fb      	str	r3, [r7, #28]
 8003b74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b78:	4641      	mov	r1, r8
 8003b7a:	1851      	adds	r1, r2, r1
 8003b7c:	6139      	str	r1, [r7, #16]
 8003b7e:	4649      	mov	r1, r9
 8003b80:	414b      	adcs	r3, r1
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b90:	4659      	mov	r1, fp
 8003b92:	00cb      	lsls	r3, r1, #3
 8003b94:	4651      	mov	r1, sl
 8003b96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b9a:	4651      	mov	r1, sl
 8003b9c:	00ca      	lsls	r2, r1, #3
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	4642      	mov	r2, r8
 8003ba6:	189b      	adds	r3, r3, r2
 8003ba8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bac:	464b      	mov	r3, r9
 8003bae:	460a      	mov	r2, r1
 8003bb0:	eb42 0303 	adc.w	r3, r2, r3
 8003bb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bc2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003bd0:	4649      	mov	r1, r9
 8003bd2:	008b      	lsls	r3, r1, #2
 8003bd4:	4641      	mov	r1, r8
 8003bd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bda:	4641      	mov	r1, r8
 8003bdc:	008a      	lsls	r2, r1, #2
 8003bde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003be2:	f7fc fb4d 	bl	8000280 <__aeabi_uldivmod>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	4611      	mov	r1, r2
 8003bec:	4b38      	ldr	r3, [pc, #224]	@ (8003cd0 <UART_SetConfig+0x4e4>)
 8003bee:	fba3 2301 	umull	r2, r3, r3, r1
 8003bf2:	095b      	lsrs	r3, r3, #5
 8003bf4:	2264      	movs	r2, #100	@ 0x64
 8003bf6:	fb02 f303 	mul.w	r3, r2, r3
 8003bfa:	1acb      	subs	r3, r1, r3
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	3332      	adds	r3, #50	@ 0x32
 8003c00:	4a33      	ldr	r2, [pc, #204]	@ (8003cd0 <UART_SetConfig+0x4e4>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c0c:	441c      	add	r4, r3
 8003c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c12:	2200      	movs	r2, #0
 8003c14:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c16:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c1c:	4642      	mov	r2, r8
 8003c1e:	464b      	mov	r3, r9
 8003c20:	1891      	adds	r1, r2, r2
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	415b      	adcs	r3, r3
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c2c:	4641      	mov	r1, r8
 8003c2e:	1851      	adds	r1, r2, r1
 8003c30:	6039      	str	r1, [r7, #0]
 8003c32:	4649      	mov	r1, r9
 8003c34:	414b      	adcs	r3, r1
 8003c36:	607b      	str	r3, [r7, #4]
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c44:	4659      	mov	r1, fp
 8003c46:	00cb      	lsls	r3, r1, #3
 8003c48:	4651      	mov	r1, sl
 8003c4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c4e:	4651      	mov	r1, sl
 8003c50:	00ca      	lsls	r2, r1, #3
 8003c52:	4610      	mov	r0, r2
 8003c54:	4619      	mov	r1, r3
 8003c56:	4603      	mov	r3, r0
 8003c58:	4642      	mov	r2, r8
 8003c5a:	189b      	adds	r3, r3, r2
 8003c5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c5e:	464b      	mov	r3, r9
 8003c60:	460a      	mov	r2, r1
 8003c62:	eb42 0303 	adc.w	r3, r2, r3
 8003c66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c72:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	f04f 0300 	mov.w	r3, #0
 8003c7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c80:	4649      	mov	r1, r9
 8003c82:	008b      	lsls	r3, r1, #2
 8003c84:	4641      	mov	r1, r8
 8003c86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c8a:	4641      	mov	r1, r8
 8003c8c:	008a      	lsls	r2, r1, #2
 8003c8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c92:	f7fc faf5 	bl	8000280 <__aeabi_uldivmod>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd0 <UART_SetConfig+0x4e4>)
 8003c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003ca0:	095b      	lsrs	r3, r3, #5
 8003ca2:	2164      	movs	r1, #100	@ 0x64
 8003ca4:	fb01 f303 	mul.w	r3, r1, r3
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	3332      	adds	r3, #50	@ 0x32
 8003cae:	4a08      	ldr	r2, [pc, #32]	@ (8003cd0 <UART_SetConfig+0x4e4>)
 8003cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb4:	095b      	lsrs	r3, r3, #5
 8003cb6:	f003 020f 	and.w	r2, r3, #15
 8003cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4422      	add	r2, r4
 8003cc2:	609a      	str	r2, [r3, #8]
}
 8003cc4:	bf00      	nop
 8003cc6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cd0:	51eb851f 	.word	0x51eb851f

08003cd4 <siprintf>:
 8003cd4:	b40e      	push	{r1, r2, r3}
 8003cd6:	b500      	push	{lr}
 8003cd8:	b09c      	sub	sp, #112	@ 0x70
 8003cda:	ab1d      	add	r3, sp, #116	@ 0x74
 8003cdc:	9002      	str	r0, [sp, #8]
 8003cde:	9006      	str	r0, [sp, #24]
 8003ce0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003ce4:	4809      	ldr	r0, [pc, #36]	@ (8003d0c <siprintf+0x38>)
 8003ce6:	9107      	str	r1, [sp, #28]
 8003ce8:	9104      	str	r1, [sp, #16]
 8003cea:	4909      	ldr	r1, [pc, #36]	@ (8003d10 <siprintf+0x3c>)
 8003cec:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cf0:	9105      	str	r1, [sp, #20]
 8003cf2:	6800      	ldr	r0, [r0, #0]
 8003cf4:	9301      	str	r3, [sp, #4]
 8003cf6:	a902      	add	r1, sp, #8
 8003cf8:	f000 f994 	bl	8004024 <_svfiprintf_r>
 8003cfc:	9b02      	ldr	r3, [sp, #8]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	701a      	strb	r2, [r3, #0]
 8003d02:	b01c      	add	sp, #112	@ 0x70
 8003d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d08:	b003      	add	sp, #12
 8003d0a:	4770      	bx	lr
 8003d0c:	2000000c 	.word	0x2000000c
 8003d10:	ffff0208 	.word	0xffff0208

08003d14 <memset>:
 8003d14:	4402      	add	r2, r0
 8003d16:	4603      	mov	r3, r0
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d100      	bne.n	8003d1e <memset+0xa>
 8003d1c:	4770      	bx	lr
 8003d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d22:	e7f9      	b.n	8003d18 <memset+0x4>

08003d24 <__errno>:
 8003d24:	4b01      	ldr	r3, [pc, #4]	@ (8003d2c <__errno+0x8>)
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	2000000c 	.word	0x2000000c

08003d30 <__libc_init_array>:
 8003d30:	b570      	push	{r4, r5, r6, lr}
 8003d32:	4d0d      	ldr	r5, [pc, #52]	@ (8003d68 <__libc_init_array+0x38>)
 8003d34:	4c0d      	ldr	r4, [pc, #52]	@ (8003d6c <__libc_init_array+0x3c>)
 8003d36:	1b64      	subs	r4, r4, r5
 8003d38:	10a4      	asrs	r4, r4, #2
 8003d3a:	2600      	movs	r6, #0
 8003d3c:	42a6      	cmp	r6, r4
 8003d3e:	d109      	bne.n	8003d54 <__libc_init_array+0x24>
 8003d40:	4d0b      	ldr	r5, [pc, #44]	@ (8003d70 <__libc_init_array+0x40>)
 8003d42:	4c0c      	ldr	r4, [pc, #48]	@ (8003d74 <__libc_init_array+0x44>)
 8003d44:	f000 fc66 	bl	8004614 <_init>
 8003d48:	1b64      	subs	r4, r4, r5
 8003d4a:	10a4      	asrs	r4, r4, #2
 8003d4c:	2600      	movs	r6, #0
 8003d4e:	42a6      	cmp	r6, r4
 8003d50:	d105      	bne.n	8003d5e <__libc_init_array+0x2e>
 8003d52:	bd70      	pop	{r4, r5, r6, pc}
 8003d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d58:	4798      	blx	r3
 8003d5a:	3601      	adds	r6, #1
 8003d5c:	e7ee      	b.n	8003d3c <__libc_init_array+0xc>
 8003d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d62:	4798      	blx	r3
 8003d64:	3601      	adds	r6, #1
 8003d66:	e7f2      	b.n	8003d4e <__libc_init_array+0x1e>
 8003d68:	080046a8 	.word	0x080046a8
 8003d6c:	080046a8 	.word	0x080046a8
 8003d70:	080046a8 	.word	0x080046a8
 8003d74:	080046ac 	.word	0x080046ac

08003d78 <__retarget_lock_acquire_recursive>:
 8003d78:	4770      	bx	lr

08003d7a <__retarget_lock_release_recursive>:
 8003d7a:	4770      	bx	lr

08003d7c <_free_r>:
 8003d7c:	b538      	push	{r3, r4, r5, lr}
 8003d7e:	4605      	mov	r5, r0
 8003d80:	2900      	cmp	r1, #0
 8003d82:	d041      	beq.n	8003e08 <_free_r+0x8c>
 8003d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d88:	1f0c      	subs	r4, r1, #4
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	bfb8      	it	lt
 8003d8e:	18e4      	addlt	r4, r4, r3
 8003d90:	f000 f8e0 	bl	8003f54 <__malloc_lock>
 8003d94:	4a1d      	ldr	r2, [pc, #116]	@ (8003e0c <_free_r+0x90>)
 8003d96:	6813      	ldr	r3, [r2, #0]
 8003d98:	b933      	cbnz	r3, 8003da8 <_free_r+0x2c>
 8003d9a:	6063      	str	r3, [r4, #4]
 8003d9c:	6014      	str	r4, [r2, #0]
 8003d9e:	4628      	mov	r0, r5
 8003da0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003da4:	f000 b8dc 	b.w	8003f60 <__malloc_unlock>
 8003da8:	42a3      	cmp	r3, r4
 8003daa:	d908      	bls.n	8003dbe <_free_r+0x42>
 8003dac:	6820      	ldr	r0, [r4, #0]
 8003dae:	1821      	adds	r1, r4, r0
 8003db0:	428b      	cmp	r3, r1
 8003db2:	bf01      	itttt	eq
 8003db4:	6819      	ldreq	r1, [r3, #0]
 8003db6:	685b      	ldreq	r3, [r3, #4]
 8003db8:	1809      	addeq	r1, r1, r0
 8003dba:	6021      	streq	r1, [r4, #0]
 8003dbc:	e7ed      	b.n	8003d9a <_free_r+0x1e>
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	b10b      	cbz	r3, 8003dc8 <_free_r+0x4c>
 8003dc4:	42a3      	cmp	r3, r4
 8003dc6:	d9fa      	bls.n	8003dbe <_free_r+0x42>
 8003dc8:	6811      	ldr	r1, [r2, #0]
 8003dca:	1850      	adds	r0, r2, r1
 8003dcc:	42a0      	cmp	r0, r4
 8003dce:	d10b      	bne.n	8003de8 <_free_r+0x6c>
 8003dd0:	6820      	ldr	r0, [r4, #0]
 8003dd2:	4401      	add	r1, r0
 8003dd4:	1850      	adds	r0, r2, r1
 8003dd6:	4283      	cmp	r3, r0
 8003dd8:	6011      	str	r1, [r2, #0]
 8003dda:	d1e0      	bne.n	8003d9e <_free_r+0x22>
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	6053      	str	r3, [r2, #4]
 8003de2:	4408      	add	r0, r1
 8003de4:	6010      	str	r0, [r2, #0]
 8003de6:	e7da      	b.n	8003d9e <_free_r+0x22>
 8003de8:	d902      	bls.n	8003df0 <_free_r+0x74>
 8003dea:	230c      	movs	r3, #12
 8003dec:	602b      	str	r3, [r5, #0]
 8003dee:	e7d6      	b.n	8003d9e <_free_r+0x22>
 8003df0:	6820      	ldr	r0, [r4, #0]
 8003df2:	1821      	adds	r1, r4, r0
 8003df4:	428b      	cmp	r3, r1
 8003df6:	bf04      	itt	eq
 8003df8:	6819      	ldreq	r1, [r3, #0]
 8003dfa:	685b      	ldreq	r3, [r3, #4]
 8003dfc:	6063      	str	r3, [r4, #4]
 8003dfe:	bf04      	itt	eq
 8003e00:	1809      	addeq	r1, r1, r0
 8003e02:	6021      	streq	r1, [r4, #0]
 8003e04:	6054      	str	r4, [r2, #4]
 8003e06:	e7ca      	b.n	8003d9e <_free_r+0x22>
 8003e08:	bd38      	pop	{r3, r4, r5, pc}
 8003e0a:	bf00      	nop
 8003e0c:	200002a8 	.word	0x200002a8

08003e10 <sbrk_aligned>:
 8003e10:	b570      	push	{r4, r5, r6, lr}
 8003e12:	4e0f      	ldr	r6, [pc, #60]	@ (8003e50 <sbrk_aligned+0x40>)
 8003e14:	460c      	mov	r4, r1
 8003e16:	6831      	ldr	r1, [r6, #0]
 8003e18:	4605      	mov	r5, r0
 8003e1a:	b911      	cbnz	r1, 8003e22 <sbrk_aligned+0x12>
 8003e1c:	f000 fba6 	bl	800456c <_sbrk_r>
 8003e20:	6030      	str	r0, [r6, #0]
 8003e22:	4621      	mov	r1, r4
 8003e24:	4628      	mov	r0, r5
 8003e26:	f000 fba1 	bl	800456c <_sbrk_r>
 8003e2a:	1c43      	adds	r3, r0, #1
 8003e2c:	d103      	bne.n	8003e36 <sbrk_aligned+0x26>
 8003e2e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003e32:	4620      	mov	r0, r4
 8003e34:	bd70      	pop	{r4, r5, r6, pc}
 8003e36:	1cc4      	adds	r4, r0, #3
 8003e38:	f024 0403 	bic.w	r4, r4, #3
 8003e3c:	42a0      	cmp	r0, r4
 8003e3e:	d0f8      	beq.n	8003e32 <sbrk_aligned+0x22>
 8003e40:	1a21      	subs	r1, r4, r0
 8003e42:	4628      	mov	r0, r5
 8003e44:	f000 fb92 	bl	800456c <_sbrk_r>
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d1f2      	bne.n	8003e32 <sbrk_aligned+0x22>
 8003e4c:	e7ef      	b.n	8003e2e <sbrk_aligned+0x1e>
 8003e4e:	bf00      	nop
 8003e50:	200002a4 	.word	0x200002a4

08003e54 <_malloc_r>:
 8003e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e58:	1ccd      	adds	r5, r1, #3
 8003e5a:	f025 0503 	bic.w	r5, r5, #3
 8003e5e:	3508      	adds	r5, #8
 8003e60:	2d0c      	cmp	r5, #12
 8003e62:	bf38      	it	cc
 8003e64:	250c      	movcc	r5, #12
 8003e66:	2d00      	cmp	r5, #0
 8003e68:	4606      	mov	r6, r0
 8003e6a:	db01      	blt.n	8003e70 <_malloc_r+0x1c>
 8003e6c:	42a9      	cmp	r1, r5
 8003e6e:	d904      	bls.n	8003e7a <_malloc_r+0x26>
 8003e70:	230c      	movs	r3, #12
 8003e72:	6033      	str	r3, [r6, #0]
 8003e74:	2000      	movs	r0, #0
 8003e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f50 <_malloc_r+0xfc>
 8003e7e:	f000 f869 	bl	8003f54 <__malloc_lock>
 8003e82:	f8d8 3000 	ldr.w	r3, [r8]
 8003e86:	461c      	mov	r4, r3
 8003e88:	bb44      	cbnz	r4, 8003edc <_malloc_r+0x88>
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	4630      	mov	r0, r6
 8003e8e:	f7ff ffbf 	bl	8003e10 <sbrk_aligned>
 8003e92:	1c43      	adds	r3, r0, #1
 8003e94:	4604      	mov	r4, r0
 8003e96:	d158      	bne.n	8003f4a <_malloc_r+0xf6>
 8003e98:	f8d8 4000 	ldr.w	r4, [r8]
 8003e9c:	4627      	mov	r7, r4
 8003e9e:	2f00      	cmp	r7, #0
 8003ea0:	d143      	bne.n	8003f2a <_malloc_r+0xd6>
 8003ea2:	2c00      	cmp	r4, #0
 8003ea4:	d04b      	beq.n	8003f3e <_malloc_r+0xea>
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	4639      	mov	r1, r7
 8003eaa:	4630      	mov	r0, r6
 8003eac:	eb04 0903 	add.w	r9, r4, r3
 8003eb0:	f000 fb5c 	bl	800456c <_sbrk_r>
 8003eb4:	4581      	cmp	r9, r0
 8003eb6:	d142      	bne.n	8003f3e <_malloc_r+0xea>
 8003eb8:	6821      	ldr	r1, [r4, #0]
 8003eba:	1a6d      	subs	r5, r5, r1
 8003ebc:	4629      	mov	r1, r5
 8003ebe:	4630      	mov	r0, r6
 8003ec0:	f7ff ffa6 	bl	8003e10 <sbrk_aligned>
 8003ec4:	3001      	adds	r0, #1
 8003ec6:	d03a      	beq.n	8003f3e <_malloc_r+0xea>
 8003ec8:	6823      	ldr	r3, [r4, #0]
 8003eca:	442b      	add	r3, r5
 8003ecc:	6023      	str	r3, [r4, #0]
 8003ece:	f8d8 3000 	ldr.w	r3, [r8]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	bb62      	cbnz	r2, 8003f30 <_malloc_r+0xdc>
 8003ed6:	f8c8 7000 	str.w	r7, [r8]
 8003eda:	e00f      	b.n	8003efc <_malloc_r+0xa8>
 8003edc:	6822      	ldr	r2, [r4, #0]
 8003ede:	1b52      	subs	r2, r2, r5
 8003ee0:	d420      	bmi.n	8003f24 <_malloc_r+0xd0>
 8003ee2:	2a0b      	cmp	r2, #11
 8003ee4:	d917      	bls.n	8003f16 <_malloc_r+0xc2>
 8003ee6:	1961      	adds	r1, r4, r5
 8003ee8:	42a3      	cmp	r3, r4
 8003eea:	6025      	str	r5, [r4, #0]
 8003eec:	bf18      	it	ne
 8003eee:	6059      	strne	r1, [r3, #4]
 8003ef0:	6863      	ldr	r3, [r4, #4]
 8003ef2:	bf08      	it	eq
 8003ef4:	f8c8 1000 	streq.w	r1, [r8]
 8003ef8:	5162      	str	r2, [r4, r5]
 8003efa:	604b      	str	r3, [r1, #4]
 8003efc:	4630      	mov	r0, r6
 8003efe:	f000 f82f 	bl	8003f60 <__malloc_unlock>
 8003f02:	f104 000b 	add.w	r0, r4, #11
 8003f06:	1d23      	adds	r3, r4, #4
 8003f08:	f020 0007 	bic.w	r0, r0, #7
 8003f0c:	1ac2      	subs	r2, r0, r3
 8003f0e:	bf1c      	itt	ne
 8003f10:	1a1b      	subne	r3, r3, r0
 8003f12:	50a3      	strne	r3, [r4, r2]
 8003f14:	e7af      	b.n	8003e76 <_malloc_r+0x22>
 8003f16:	6862      	ldr	r2, [r4, #4]
 8003f18:	42a3      	cmp	r3, r4
 8003f1a:	bf0c      	ite	eq
 8003f1c:	f8c8 2000 	streq.w	r2, [r8]
 8003f20:	605a      	strne	r2, [r3, #4]
 8003f22:	e7eb      	b.n	8003efc <_malloc_r+0xa8>
 8003f24:	4623      	mov	r3, r4
 8003f26:	6864      	ldr	r4, [r4, #4]
 8003f28:	e7ae      	b.n	8003e88 <_malloc_r+0x34>
 8003f2a:	463c      	mov	r4, r7
 8003f2c:	687f      	ldr	r7, [r7, #4]
 8003f2e:	e7b6      	b.n	8003e9e <_malloc_r+0x4a>
 8003f30:	461a      	mov	r2, r3
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	42a3      	cmp	r3, r4
 8003f36:	d1fb      	bne.n	8003f30 <_malloc_r+0xdc>
 8003f38:	2300      	movs	r3, #0
 8003f3a:	6053      	str	r3, [r2, #4]
 8003f3c:	e7de      	b.n	8003efc <_malloc_r+0xa8>
 8003f3e:	230c      	movs	r3, #12
 8003f40:	6033      	str	r3, [r6, #0]
 8003f42:	4630      	mov	r0, r6
 8003f44:	f000 f80c 	bl	8003f60 <__malloc_unlock>
 8003f48:	e794      	b.n	8003e74 <_malloc_r+0x20>
 8003f4a:	6005      	str	r5, [r0, #0]
 8003f4c:	e7d6      	b.n	8003efc <_malloc_r+0xa8>
 8003f4e:	bf00      	nop
 8003f50:	200002a8 	.word	0x200002a8

08003f54 <__malloc_lock>:
 8003f54:	4801      	ldr	r0, [pc, #4]	@ (8003f5c <__malloc_lock+0x8>)
 8003f56:	f7ff bf0f 	b.w	8003d78 <__retarget_lock_acquire_recursive>
 8003f5a:	bf00      	nop
 8003f5c:	200002a0 	.word	0x200002a0

08003f60 <__malloc_unlock>:
 8003f60:	4801      	ldr	r0, [pc, #4]	@ (8003f68 <__malloc_unlock+0x8>)
 8003f62:	f7ff bf0a 	b.w	8003d7a <__retarget_lock_release_recursive>
 8003f66:	bf00      	nop
 8003f68:	200002a0 	.word	0x200002a0

08003f6c <__ssputs_r>:
 8003f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f70:	688e      	ldr	r6, [r1, #8]
 8003f72:	461f      	mov	r7, r3
 8003f74:	42be      	cmp	r6, r7
 8003f76:	680b      	ldr	r3, [r1, #0]
 8003f78:	4682      	mov	sl, r0
 8003f7a:	460c      	mov	r4, r1
 8003f7c:	4690      	mov	r8, r2
 8003f7e:	d82d      	bhi.n	8003fdc <__ssputs_r+0x70>
 8003f80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f88:	d026      	beq.n	8003fd8 <__ssputs_r+0x6c>
 8003f8a:	6965      	ldr	r5, [r4, #20]
 8003f8c:	6909      	ldr	r1, [r1, #16]
 8003f8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f92:	eba3 0901 	sub.w	r9, r3, r1
 8003f96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f9a:	1c7b      	adds	r3, r7, #1
 8003f9c:	444b      	add	r3, r9
 8003f9e:	106d      	asrs	r5, r5, #1
 8003fa0:	429d      	cmp	r5, r3
 8003fa2:	bf38      	it	cc
 8003fa4:	461d      	movcc	r5, r3
 8003fa6:	0553      	lsls	r3, r2, #21
 8003fa8:	d527      	bpl.n	8003ffa <__ssputs_r+0x8e>
 8003faa:	4629      	mov	r1, r5
 8003fac:	f7ff ff52 	bl	8003e54 <_malloc_r>
 8003fb0:	4606      	mov	r6, r0
 8003fb2:	b360      	cbz	r0, 800400e <__ssputs_r+0xa2>
 8003fb4:	6921      	ldr	r1, [r4, #16]
 8003fb6:	464a      	mov	r2, r9
 8003fb8:	f000 fae8 	bl	800458c <memcpy>
 8003fbc:	89a3      	ldrh	r3, [r4, #12]
 8003fbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fc6:	81a3      	strh	r3, [r4, #12]
 8003fc8:	6126      	str	r6, [r4, #16]
 8003fca:	6165      	str	r5, [r4, #20]
 8003fcc:	444e      	add	r6, r9
 8003fce:	eba5 0509 	sub.w	r5, r5, r9
 8003fd2:	6026      	str	r6, [r4, #0]
 8003fd4:	60a5      	str	r5, [r4, #8]
 8003fd6:	463e      	mov	r6, r7
 8003fd8:	42be      	cmp	r6, r7
 8003fda:	d900      	bls.n	8003fde <__ssputs_r+0x72>
 8003fdc:	463e      	mov	r6, r7
 8003fde:	6820      	ldr	r0, [r4, #0]
 8003fe0:	4632      	mov	r2, r6
 8003fe2:	4641      	mov	r1, r8
 8003fe4:	f000 faa8 	bl	8004538 <memmove>
 8003fe8:	68a3      	ldr	r3, [r4, #8]
 8003fea:	1b9b      	subs	r3, r3, r6
 8003fec:	60a3      	str	r3, [r4, #8]
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	4433      	add	r3, r6
 8003ff2:	6023      	str	r3, [r4, #0]
 8003ff4:	2000      	movs	r0, #0
 8003ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ffa:	462a      	mov	r2, r5
 8003ffc:	f000 fad4 	bl	80045a8 <_realloc_r>
 8004000:	4606      	mov	r6, r0
 8004002:	2800      	cmp	r0, #0
 8004004:	d1e0      	bne.n	8003fc8 <__ssputs_r+0x5c>
 8004006:	6921      	ldr	r1, [r4, #16]
 8004008:	4650      	mov	r0, sl
 800400a:	f7ff feb7 	bl	8003d7c <_free_r>
 800400e:	230c      	movs	r3, #12
 8004010:	f8ca 3000 	str.w	r3, [sl]
 8004014:	89a3      	ldrh	r3, [r4, #12]
 8004016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800401a:	81a3      	strh	r3, [r4, #12]
 800401c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004020:	e7e9      	b.n	8003ff6 <__ssputs_r+0x8a>
	...

08004024 <_svfiprintf_r>:
 8004024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004028:	4698      	mov	r8, r3
 800402a:	898b      	ldrh	r3, [r1, #12]
 800402c:	061b      	lsls	r3, r3, #24
 800402e:	b09d      	sub	sp, #116	@ 0x74
 8004030:	4607      	mov	r7, r0
 8004032:	460d      	mov	r5, r1
 8004034:	4614      	mov	r4, r2
 8004036:	d510      	bpl.n	800405a <_svfiprintf_r+0x36>
 8004038:	690b      	ldr	r3, [r1, #16]
 800403a:	b973      	cbnz	r3, 800405a <_svfiprintf_r+0x36>
 800403c:	2140      	movs	r1, #64	@ 0x40
 800403e:	f7ff ff09 	bl	8003e54 <_malloc_r>
 8004042:	6028      	str	r0, [r5, #0]
 8004044:	6128      	str	r0, [r5, #16]
 8004046:	b930      	cbnz	r0, 8004056 <_svfiprintf_r+0x32>
 8004048:	230c      	movs	r3, #12
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004050:	b01d      	add	sp, #116	@ 0x74
 8004052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004056:	2340      	movs	r3, #64	@ 0x40
 8004058:	616b      	str	r3, [r5, #20]
 800405a:	2300      	movs	r3, #0
 800405c:	9309      	str	r3, [sp, #36]	@ 0x24
 800405e:	2320      	movs	r3, #32
 8004060:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004064:	f8cd 800c 	str.w	r8, [sp, #12]
 8004068:	2330      	movs	r3, #48	@ 0x30
 800406a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004208 <_svfiprintf_r+0x1e4>
 800406e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004072:	f04f 0901 	mov.w	r9, #1
 8004076:	4623      	mov	r3, r4
 8004078:	469a      	mov	sl, r3
 800407a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800407e:	b10a      	cbz	r2, 8004084 <_svfiprintf_r+0x60>
 8004080:	2a25      	cmp	r2, #37	@ 0x25
 8004082:	d1f9      	bne.n	8004078 <_svfiprintf_r+0x54>
 8004084:	ebba 0b04 	subs.w	fp, sl, r4
 8004088:	d00b      	beq.n	80040a2 <_svfiprintf_r+0x7e>
 800408a:	465b      	mov	r3, fp
 800408c:	4622      	mov	r2, r4
 800408e:	4629      	mov	r1, r5
 8004090:	4638      	mov	r0, r7
 8004092:	f7ff ff6b 	bl	8003f6c <__ssputs_r>
 8004096:	3001      	adds	r0, #1
 8004098:	f000 80a7 	beq.w	80041ea <_svfiprintf_r+0x1c6>
 800409c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800409e:	445a      	add	r2, fp
 80040a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80040a2:	f89a 3000 	ldrb.w	r3, [sl]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 809f 	beq.w	80041ea <_svfiprintf_r+0x1c6>
 80040ac:	2300      	movs	r3, #0
 80040ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80040b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040b6:	f10a 0a01 	add.w	sl, sl, #1
 80040ba:	9304      	str	r3, [sp, #16]
 80040bc:	9307      	str	r3, [sp, #28]
 80040be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80040c4:	4654      	mov	r4, sl
 80040c6:	2205      	movs	r2, #5
 80040c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040cc:	484e      	ldr	r0, [pc, #312]	@ (8004208 <_svfiprintf_r+0x1e4>)
 80040ce:	f7fc f887 	bl	80001e0 <memchr>
 80040d2:	9a04      	ldr	r2, [sp, #16]
 80040d4:	b9d8      	cbnz	r0, 800410e <_svfiprintf_r+0xea>
 80040d6:	06d0      	lsls	r0, r2, #27
 80040d8:	bf44      	itt	mi
 80040da:	2320      	movmi	r3, #32
 80040dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040e0:	0711      	lsls	r1, r2, #28
 80040e2:	bf44      	itt	mi
 80040e4:	232b      	movmi	r3, #43	@ 0x2b
 80040e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040ea:	f89a 3000 	ldrb.w	r3, [sl]
 80040ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80040f0:	d015      	beq.n	800411e <_svfiprintf_r+0xfa>
 80040f2:	9a07      	ldr	r2, [sp, #28]
 80040f4:	4654      	mov	r4, sl
 80040f6:	2000      	movs	r0, #0
 80040f8:	f04f 0c0a 	mov.w	ip, #10
 80040fc:	4621      	mov	r1, r4
 80040fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004102:	3b30      	subs	r3, #48	@ 0x30
 8004104:	2b09      	cmp	r3, #9
 8004106:	d94b      	bls.n	80041a0 <_svfiprintf_r+0x17c>
 8004108:	b1b0      	cbz	r0, 8004138 <_svfiprintf_r+0x114>
 800410a:	9207      	str	r2, [sp, #28]
 800410c:	e014      	b.n	8004138 <_svfiprintf_r+0x114>
 800410e:	eba0 0308 	sub.w	r3, r0, r8
 8004112:	fa09 f303 	lsl.w	r3, r9, r3
 8004116:	4313      	orrs	r3, r2
 8004118:	9304      	str	r3, [sp, #16]
 800411a:	46a2      	mov	sl, r4
 800411c:	e7d2      	b.n	80040c4 <_svfiprintf_r+0xa0>
 800411e:	9b03      	ldr	r3, [sp, #12]
 8004120:	1d19      	adds	r1, r3, #4
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	9103      	str	r1, [sp, #12]
 8004126:	2b00      	cmp	r3, #0
 8004128:	bfbb      	ittet	lt
 800412a:	425b      	neglt	r3, r3
 800412c:	f042 0202 	orrlt.w	r2, r2, #2
 8004130:	9307      	strge	r3, [sp, #28]
 8004132:	9307      	strlt	r3, [sp, #28]
 8004134:	bfb8      	it	lt
 8004136:	9204      	strlt	r2, [sp, #16]
 8004138:	7823      	ldrb	r3, [r4, #0]
 800413a:	2b2e      	cmp	r3, #46	@ 0x2e
 800413c:	d10a      	bne.n	8004154 <_svfiprintf_r+0x130>
 800413e:	7863      	ldrb	r3, [r4, #1]
 8004140:	2b2a      	cmp	r3, #42	@ 0x2a
 8004142:	d132      	bne.n	80041aa <_svfiprintf_r+0x186>
 8004144:	9b03      	ldr	r3, [sp, #12]
 8004146:	1d1a      	adds	r2, r3, #4
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	9203      	str	r2, [sp, #12]
 800414c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004150:	3402      	adds	r4, #2
 8004152:	9305      	str	r3, [sp, #20]
 8004154:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004218 <_svfiprintf_r+0x1f4>
 8004158:	7821      	ldrb	r1, [r4, #0]
 800415a:	2203      	movs	r2, #3
 800415c:	4650      	mov	r0, sl
 800415e:	f7fc f83f 	bl	80001e0 <memchr>
 8004162:	b138      	cbz	r0, 8004174 <_svfiprintf_r+0x150>
 8004164:	9b04      	ldr	r3, [sp, #16]
 8004166:	eba0 000a 	sub.w	r0, r0, sl
 800416a:	2240      	movs	r2, #64	@ 0x40
 800416c:	4082      	lsls	r2, r0
 800416e:	4313      	orrs	r3, r2
 8004170:	3401      	adds	r4, #1
 8004172:	9304      	str	r3, [sp, #16]
 8004174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004178:	4824      	ldr	r0, [pc, #144]	@ (800420c <_svfiprintf_r+0x1e8>)
 800417a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800417e:	2206      	movs	r2, #6
 8004180:	f7fc f82e 	bl	80001e0 <memchr>
 8004184:	2800      	cmp	r0, #0
 8004186:	d036      	beq.n	80041f6 <_svfiprintf_r+0x1d2>
 8004188:	4b21      	ldr	r3, [pc, #132]	@ (8004210 <_svfiprintf_r+0x1ec>)
 800418a:	bb1b      	cbnz	r3, 80041d4 <_svfiprintf_r+0x1b0>
 800418c:	9b03      	ldr	r3, [sp, #12]
 800418e:	3307      	adds	r3, #7
 8004190:	f023 0307 	bic.w	r3, r3, #7
 8004194:	3308      	adds	r3, #8
 8004196:	9303      	str	r3, [sp, #12]
 8004198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800419a:	4433      	add	r3, r6
 800419c:	9309      	str	r3, [sp, #36]	@ 0x24
 800419e:	e76a      	b.n	8004076 <_svfiprintf_r+0x52>
 80041a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80041a4:	460c      	mov	r4, r1
 80041a6:	2001      	movs	r0, #1
 80041a8:	e7a8      	b.n	80040fc <_svfiprintf_r+0xd8>
 80041aa:	2300      	movs	r3, #0
 80041ac:	3401      	adds	r4, #1
 80041ae:	9305      	str	r3, [sp, #20]
 80041b0:	4619      	mov	r1, r3
 80041b2:	f04f 0c0a 	mov.w	ip, #10
 80041b6:	4620      	mov	r0, r4
 80041b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041bc:	3a30      	subs	r2, #48	@ 0x30
 80041be:	2a09      	cmp	r2, #9
 80041c0:	d903      	bls.n	80041ca <_svfiprintf_r+0x1a6>
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0c6      	beq.n	8004154 <_svfiprintf_r+0x130>
 80041c6:	9105      	str	r1, [sp, #20]
 80041c8:	e7c4      	b.n	8004154 <_svfiprintf_r+0x130>
 80041ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80041ce:	4604      	mov	r4, r0
 80041d0:	2301      	movs	r3, #1
 80041d2:	e7f0      	b.n	80041b6 <_svfiprintf_r+0x192>
 80041d4:	ab03      	add	r3, sp, #12
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	462a      	mov	r2, r5
 80041da:	4b0e      	ldr	r3, [pc, #56]	@ (8004214 <_svfiprintf_r+0x1f0>)
 80041dc:	a904      	add	r1, sp, #16
 80041de:	4638      	mov	r0, r7
 80041e0:	f3af 8000 	nop.w
 80041e4:	1c42      	adds	r2, r0, #1
 80041e6:	4606      	mov	r6, r0
 80041e8:	d1d6      	bne.n	8004198 <_svfiprintf_r+0x174>
 80041ea:	89ab      	ldrh	r3, [r5, #12]
 80041ec:	065b      	lsls	r3, r3, #25
 80041ee:	f53f af2d 	bmi.w	800404c <_svfiprintf_r+0x28>
 80041f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041f4:	e72c      	b.n	8004050 <_svfiprintf_r+0x2c>
 80041f6:	ab03      	add	r3, sp, #12
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	462a      	mov	r2, r5
 80041fc:	4b05      	ldr	r3, [pc, #20]	@ (8004214 <_svfiprintf_r+0x1f0>)
 80041fe:	a904      	add	r1, sp, #16
 8004200:	4638      	mov	r0, r7
 8004202:	f000 f879 	bl	80042f8 <_printf_i>
 8004206:	e7ed      	b.n	80041e4 <_svfiprintf_r+0x1c0>
 8004208:	0800466c 	.word	0x0800466c
 800420c:	08004676 	.word	0x08004676
 8004210:	00000000 	.word	0x00000000
 8004214:	08003f6d 	.word	0x08003f6d
 8004218:	08004672 	.word	0x08004672

0800421c <_printf_common>:
 800421c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004220:	4616      	mov	r6, r2
 8004222:	4698      	mov	r8, r3
 8004224:	688a      	ldr	r2, [r1, #8]
 8004226:	690b      	ldr	r3, [r1, #16]
 8004228:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800422c:	4293      	cmp	r3, r2
 800422e:	bfb8      	it	lt
 8004230:	4613      	movlt	r3, r2
 8004232:	6033      	str	r3, [r6, #0]
 8004234:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004238:	4607      	mov	r7, r0
 800423a:	460c      	mov	r4, r1
 800423c:	b10a      	cbz	r2, 8004242 <_printf_common+0x26>
 800423e:	3301      	adds	r3, #1
 8004240:	6033      	str	r3, [r6, #0]
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	0699      	lsls	r1, r3, #26
 8004246:	bf42      	ittt	mi
 8004248:	6833      	ldrmi	r3, [r6, #0]
 800424a:	3302      	addmi	r3, #2
 800424c:	6033      	strmi	r3, [r6, #0]
 800424e:	6825      	ldr	r5, [r4, #0]
 8004250:	f015 0506 	ands.w	r5, r5, #6
 8004254:	d106      	bne.n	8004264 <_printf_common+0x48>
 8004256:	f104 0a19 	add.w	sl, r4, #25
 800425a:	68e3      	ldr	r3, [r4, #12]
 800425c:	6832      	ldr	r2, [r6, #0]
 800425e:	1a9b      	subs	r3, r3, r2
 8004260:	42ab      	cmp	r3, r5
 8004262:	dc26      	bgt.n	80042b2 <_printf_common+0x96>
 8004264:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004268:	6822      	ldr	r2, [r4, #0]
 800426a:	3b00      	subs	r3, #0
 800426c:	bf18      	it	ne
 800426e:	2301      	movne	r3, #1
 8004270:	0692      	lsls	r2, r2, #26
 8004272:	d42b      	bmi.n	80042cc <_printf_common+0xb0>
 8004274:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004278:	4641      	mov	r1, r8
 800427a:	4638      	mov	r0, r7
 800427c:	47c8      	blx	r9
 800427e:	3001      	adds	r0, #1
 8004280:	d01e      	beq.n	80042c0 <_printf_common+0xa4>
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	6922      	ldr	r2, [r4, #16]
 8004286:	f003 0306 	and.w	r3, r3, #6
 800428a:	2b04      	cmp	r3, #4
 800428c:	bf02      	ittt	eq
 800428e:	68e5      	ldreq	r5, [r4, #12]
 8004290:	6833      	ldreq	r3, [r6, #0]
 8004292:	1aed      	subeq	r5, r5, r3
 8004294:	68a3      	ldr	r3, [r4, #8]
 8004296:	bf0c      	ite	eq
 8004298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800429c:	2500      	movne	r5, #0
 800429e:	4293      	cmp	r3, r2
 80042a0:	bfc4      	itt	gt
 80042a2:	1a9b      	subgt	r3, r3, r2
 80042a4:	18ed      	addgt	r5, r5, r3
 80042a6:	2600      	movs	r6, #0
 80042a8:	341a      	adds	r4, #26
 80042aa:	42b5      	cmp	r5, r6
 80042ac:	d11a      	bne.n	80042e4 <_printf_common+0xc8>
 80042ae:	2000      	movs	r0, #0
 80042b0:	e008      	b.n	80042c4 <_printf_common+0xa8>
 80042b2:	2301      	movs	r3, #1
 80042b4:	4652      	mov	r2, sl
 80042b6:	4641      	mov	r1, r8
 80042b8:	4638      	mov	r0, r7
 80042ba:	47c8      	blx	r9
 80042bc:	3001      	adds	r0, #1
 80042be:	d103      	bne.n	80042c8 <_printf_common+0xac>
 80042c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80042c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c8:	3501      	adds	r5, #1
 80042ca:	e7c6      	b.n	800425a <_printf_common+0x3e>
 80042cc:	18e1      	adds	r1, r4, r3
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	2030      	movs	r0, #48	@ 0x30
 80042d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042d6:	4422      	add	r2, r4
 80042d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042e0:	3302      	adds	r3, #2
 80042e2:	e7c7      	b.n	8004274 <_printf_common+0x58>
 80042e4:	2301      	movs	r3, #1
 80042e6:	4622      	mov	r2, r4
 80042e8:	4641      	mov	r1, r8
 80042ea:	4638      	mov	r0, r7
 80042ec:	47c8      	blx	r9
 80042ee:	3001      	adds	r0, #1
 80042f0:	d0e6      	beq.n	80042c0 <_printf_common+0xa4>
 80042f2:	3601      	adds	r6, #1
 80042f4:	e7d9      	b.n	80042aa <_printf_common+0x8e>
	...

080042f8 <_printf_i>:
 80042f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042fc:	7e0f      	ldrb	r7, [r1, #24]
 80042fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004300:	2f78      	cmp	r7, #120	@ 0x78
 8004302:	4691      	mov	r9, r2
 8004304:	4680      	mov	r8, r0
 8004306:	460c      	mov	r4, r1
 8004308:	469a      	mov	sl, r3
 800430a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800430e:	d807      	bhi.n	8004320 <_printf_i+0x28>
 8004310:	2f62      	cmp	r7, #98	@ 0x62
 8004312:	d80a      	bhi.n	800432a <_printf_i+0x32>
 8004314:	2f00      	cmp	r7, #0
 8004316:	f000 80d2 	beq.w	80044be <_printf_i+0x1c6>
 800431a:	2f58      	cmp	r7, #88	@ 0x58
 800431c:	f000 80b9 	beq.w	8004492 <_printf_i+0x19a>
 8004320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004324:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004328:	e03a      	b.n	80043a0 <_printf_i+0xa8>
 800432a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800432e:	2b15      	cmp	r3, #21
 8004330:	d8f6      	bhi.n	8004320 <_printf_i+0x28>
 8004332:	a101      	add	r1, pc, #4	@ (adr r1, 8004338 <_printf_i+0x40>)
 8004334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004338:	08004391 	.word	0x08004391
 800433c:	080043a5 	.word	0x080043a5
 8004340:	08004321 	.word	0x08004321
 8004344:	08004321 	.word	0x08004321
 8004348:	08004321 	.word	0x08004321
 800434c:	08004321 	.word	0x08004321
 8004350:	080043a5 	.word	0x080043a5
 8004354:	08004321 	.word	0x08004321
 8004358:	08004321 	.word	0x08004321
 800435c:	08004321 	.word	0x08004321
 8004360:	08004321 	.word	0x08004321
 8004364:	080044a5 	.word	0x080044a5
 8004368:	080043cf 	.word	0x080043cf
 800436c:	0800445f 	.word	0x0800445f
 8004370:	08004321 	.word	0x08004321
 8004374:	08004321 	.word	0x08004321
 8004378:	080044c7 	.word	0x080044c7
 800437c:	08004321 	.word	0x08004321
 8004380:	080043cf 	.word	0x080043cf
 8004384:	08004321 	.word	0x08004321
 8004388:	08004321 	.word	0x08004321
 800438c:	08004467 	.word	0x08004467
 8004390:	6833      	ldr	r3, [r6, #0]
 8004392:	1d1a      	adds	r2, r3, #4
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6032      	str	r2, [r6, #0]
 8004398:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800439c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80043a0:	2301      	movs	r3, #1
 80043a2:	e09d      	b.n	80044e0 <_printf_i+0x1e8>
 80043a4:	6833      	ldr	r3, [r6, #0]
 80043a6:	6820      	ldr	r0, [r4, #0]
 80043a8:	1d19      	adds	r1, r3, #4
 80043aa:	6031      	str	r1, [r6, #0]
 80043ac:	0606      	lsls	r6, r0, #24
 80043ae:	d501      	bpl.n	80043b4 <_printf_i+0xbc>
 80043b0:	681d      	ldr	r5, [r3, #0]
 80043b2:	e003      	b.n	80043bc <_printf_i+0xc4>
 80043b4:	0645      	lsls	r5, r0, #25
 80043b6:	d5fb      	bpl.n	80043b0 <_printf_i+0xb8>
 80043b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043bc:	2d00      	cmp	r5, #0
 80043be:	da03      	bge.n	80043c8 <_printf_i+0xd0>
 80043c0:	232d      	movs	r3, #45	@ 0x2d
 80043c2:	426d      	negs	r5, r5
 80043c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043c8:	4859      	ldr	r0, [pc, #356]	@ (8004530 <_printf_i+0x238>)
 80043ca:	230a      	movs	r3, #10
 80043cc:	e011      	b.n	80043f2 <_printf_i+0xfa>
 80043ce:	6821      	ldr	r1, [r4, #0]
 80043d0:	6833      	ldr	r3, [r6, #0]
 80043d2:	0608      	lsls	r0, r1, #24
 80043d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80043d8:	d402      	bmi.n	80043e0 <_printf_i+0xe8>
 80043da:	0649      	lsls	r1, r1, #25
 80043dc:	bf48      	it	mi
 80043de:	b2ad      	uxthmi	r5, r5
 80043e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80043e2:	4853      	ldr	r0, [pc, #332]	@ (8004530 <_printf_i+0x238>)
 80043e4:	6033      	str	r3, [r6, #0]
 80043e6:	bf14      	ite	ne
 80043e8:	230a      	movne	r3, #10
 80043ea:	2308      	moveq	r3, #8
 80043ec:	2100      	movs	r1, #0
 80043ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043f2:	6866      	ldr	r6, [r4, #4]
 80043f4:	60a6      	str	r6, [r4, #8]
 80043f6:	2e00      	cmp	r6, #0
 80043f8:	bfa2      	ittt	ge
 80043fa:	6821      	ldrge	r1, [r4, #0]
 80043fc:	f021 0104 	bicge.w	r1, r1, #4
 8004400:	6021      	strge	r1, [r4, #0]
 8004402:	b90d      	cbnz	r5, 8004408 <_printf_i+0x110>
 8004404:	2e00      	cmp	r6, #0
 8004406:	d04b      	beq.n	80044a0 <_printf_i+0x1a8>
 8004408:	4616      	mov	r6, r2
 800440a:	fbb5 f1f3 	udiv	r1, r5, r3
 800440e:	fb03 5711 	mls	r7, r3, r1, r5
 8004412:	5dc7      	ldrb	r7, [r0, r7]
 8004414:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004418:	462f      	mov	r7, r5
 800441a:	42bb      	cmp	r3, r7
 800441c:	460d      	mov	r5, r1
 800441e:	d9f4      	bls.n	800440a <_printf_i+0x112>
 8004420:	2b08      	cmp	r3, #8
 8004422:	d10b      	bne.n	800443c <_printf_i+0x144>
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	07df      	lsls	r7, r3, #31
 8004428:	d508      	bpl.n	800443c <_printf_i+0x144>
 800442a:	6923      	ldr	r3, [r4, #16]
 800442c:	6861      	ldr	r1, [r4, #4]
 800442e:	4299      	cmp	r1, r3
 8004430:	bfde      	ittt	le
 8004432:	2330      	movle	r3, #48	@ 0x30
 8004434:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004438:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800443c:	1b92      	subs	r2, r2, r6
 800443e:	6122      	str	r2, [r4, #16]
 8004440:	f8cd a000 	str.w	sl, [sp]
 8004444:	464b      	mov	r3, r9
 8004446:	aa03      	add	r2, sp, #12
 8004448:	4621      	mov	r1, r4
 800444a:	4640      	mov	r0, r8
 800444c:	f7ff fee6 	bl	800421c <_printf_common>
 8004450:	3001      	adds	r0, #1
 8004452:	d14a      	bne.n	80044ea <_printf_i+0x1f2>
 8004454:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004458:	b004      	add	sp, #16
 800445a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	f043 0320 	orr.w	r3, r3, #32
 8004464:	6023      	str	r3, [r4, #0]
 8004466:	4833      	ldr	r0, [pc, #204]	@ (8004534 <_printf_i+0x23c>)
 8004468:	2778      	movs	r7, #120	@ 0x78
 800446a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	6831      	ldr	r1, [r6, #0]
 8004472:	061f      	lsls	r7, r3, #24
 8004474:	f851 5b04 	ldr.w	r5, [r1], #4
 8004478:	d402      	bmi.n	8004480 <_printf_i+0x188>
 800447a:	065f      	lsls	r7, r3, #25
 800447c:	bf48      	it	mi
 800447e:	b2ad      	uxthmi	r5, r5
 8004480:	6031      	str	r1, [r6, #0]
 8004482:	07d9      	lsls	r1, r3, #31
 8004484:	bf44      	itt	mi
 8004486:	f043 0320 	orrmi.w	r3, r3, #32
 800448a:	6023      	strmi	r3, [r4, #0]
 800448c:	b11d      	cbz	r5, 8004496 <_printf_i+0x19e>
 800448e:	2310      	movs	r3, #16
 8004490:	e7ac      	b.n	80043ec <_printf_i+0xf4>
 8004492:	4827      	ldr	r0, [pc, #156]	@ (8004530 <_printf_i+0x238>)
 8004494:	e7e9      	b.n	800446a <_printf_i+0x172>
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	f023 0320 	bic.w	r3, r3, #32
 800449c:	6023      	str	r3, [r4, #0]
 800449e:	e7f6      	b.n	800448e <_printf_i+0x196>
 80044a0:	4616      	mov	r6, r2
 80044a2:	e7bd      	b.n	8004420 <_printf_i+0x128>
 80044a4:	6833      	ldr	r3, [r6, #0]
 80044a6:	6825      	ldr	r5, [r4, #0]
 80044a8:	6961      	ldr	r1, [r4, #20]
 80044aa:	1d18      	adds	r0, r3, #4
 80044ac:	6030      	str	r0, [r6, #0]
 80044ae:	062e      	lsls	r6, r5, #24
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	d501      	bpl.n	80044b8 <_printf_i+0x1c0>
 80044b4:	6019      	str	r1, [r3, #0]
 80044b6:	e002      	b.n	80044be <_printf_i+0x1c6>
 80044b8:	0668      	lsls	r0, r5, #25
 80044ba:	d5fb      	bpl.n	80044b4 <_printf_i+0x1bc>
 80044bc:	8019      	strh	r1, [r3, #0]
 80044be:	2300      	movs	r3, #0
 80044c0:	6123      	str	r3, [r4, #16]
 80044c2:	4616      	mov	r6, r2
 80044c4:	e7bc      	b.n	8004440 <_printf_i+0x148>
 80044c6:	6833      	ldr	r3, [r6, #0]
 80044c8:	1d1a      	adds	r2, r3, #4
 80044ca:	6032      	str	r2, [r6, #0]
 80044cc:	681e      	ldr	r6, [r3, #0]
 80044ce:	6862      	ldr	r2, [r4, #4]
 80044d0:	2100      	movs	r1, #0
 80044d2:	4630      	mov	r0, r6
 80044d4:	f7fb fe84 	bl	80001e0 <memchr>
 80044d8:	b108      	cbz	r0, 80044de <_printf_i+0x1e6>
 80044da:	1b80      	subs	r0, r0, r6
 80044dc:	6060      	str	r0, [r4, #4]
 80044de:	6863      	ldr	r3, [r4, #4]
 80044e0:	6123      	str	r3, [r4, #16]
 80044e2:	2300      	movs	r3, #0
 80044e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044e8:	e7aa      	b.n	8004440 <_printf_i+0x148>
 80044ea:	6923      	ldr	r3, [r4, #16]
 80044ec:	4632      	mov	r2, r6
 80044ee:	4649      	mov	r1, r9
 80044f0:	4640      	mov	r0, r8
 80044f2:	47d0      	blx	sl
 80044f4:	3001      	adds	r0, #1
 80044f6:	d0ad      	beq.n	8004454 <_printf_i+0x15c>
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	079b      	lsls	r3, r3, #30
 80044fc:	d413      	bmi.n	8004526 <_printf_i+0x22e>
 80044fe:	68e0      	ldr	r0, [r4, #12]
 8004500:	9b03      	ldr	r3, [sp, #12]
 8004502:	4298      	cmp	r0, r3
 8004504:	bfb8      	it	lt
 8004506:	4618      	movlt	r0, r3
 8004508:	e7a6      	b.n	8004458 <_printf_i+0x160>
 800450a:	2301      	movs	r3, #1
 800450c:	4632      	mov	r2, r6
 800450e:	4649      	mov	r1, r9
 8004510:	4640      	mov	r0, r8
 8004512:	47d0      	blx	sl
 8004514:	3001      	adds	r0, #1
 8004516:	d09d      	beq.n	8004454 <_printf_i+0x15c>
 8004518:	3501      	adds	r5, #1
 800451a:	68e3      	ldr	r3, [r4, #12]
 800451c:	9903      	ldr	r1, [sp, #12]
 800451e:	1a5b      	subs	r3, r3, r1
 8004520:	42ab      	cmp	r3, r5
 8004522:	dcf2      	bgt.n	800450a <_printf_i+0x212>
 8004524:	e7eb      	b.n	80044fe <_printf_i+0x206>
 8004526:	2500      	movs	r5, #0
 8004528:	f104 0619 	add.w	r6, r4, #25
 800452c:	e7f5      	b.n	800451a <_printf_i+0x222>
 800452e:	bf00      	nop
 8004530:	0800467d 	.word	0x0800467d
 8004534:	0800468e 	.word	0x0800468e

08004538 <memmove>:
 8004538:	4288      	cmp	r0, r1
 800453a:	b510      	push	{r4, lr}
 800453c:	eb01 0402 	add.w	r4, r1, r2
 8004540:	d902      	bls.n	8004548 <memmove+0x10>
 8004542:	4284      	cmp	r4, r0
 8004544:	4623      	mov	r3, r4
 8004546:	d807      	bhi.n	8004558 <memmove+0x20>
 8004548:	1e43      	subs	r3, r0, #1
 800454a:	42a1      	cmp	r1, r4
 800454c:	d008      	beq.n	8004560 <memmove+0x28>
 800454e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004552:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004556:	e7f8      	b.n	800454a <memmove+0x12>
 8004558:	4402      	add	r2, r0
 800455a:	4601      	mov	r1, r0
 800455c:	428a      	cmp	r2, r1
 800455e:	d100      	bne.n	8004562 <memmove+0x2a>
 8004560:	bd10      	pop	{r4, pc}
 8004562:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004566:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800456a:	e7f7      	b.n	800455c <memmove+0x24>

0800456c <_sbrk_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4d06      	ldr	r5, [pc, #24]	@ (8004588 <_sbrk_r+0x1c>)
 8004570:	2300      	movs	r3, #0
 8004572:	4604      	mov	r4, r0
 8004574:	4608      	mov	r0, r1
 8004576:	602b      	str	r3, [r5, #0]
 8004578:	f7fc fc76 	bl	8000e68 <_sbrk>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d102      	bne.n	8004586 <_sbrk_r+0x1a>
 8004580:	682b      	ldr	r3, [r5, #0]
 8004582:	b103      	cbz	r3, 8004586 <_sbrk_r+0x1a>
 8004584:	6023      	str	r3, [r4, #0]
 8004586:	bd38      	pop	{r3, r4, r5, pc}
 8004588:	2000029c 	.word	0x2000029c

0800458c <memcpy>:
 800458c:	440a      	add	r2, r1
 800458e:	4291      	cmp	r1, r2
 8004590:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004594:	d100      	bne.n	8004598 <memcpy+0xc>
 8004596:	4770      	bx	lr
 8004598:	b510      	push	{r4, lr}
 800459a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800459e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045a2:	4291      	cmp	r1, r2
 80045a4:	d1f9      	bne.n	800459a <memcpy+0xe>
 80045a6:	bd10      	pop	{r4, pc}

080045a8 <_realloc_r>:
 80045a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ac:	4680      	mov	r8, r0
 80045ae:	4615      	mov	r5, r2
 80045b0:	460c      	mov	r4, r1
 80045b2:	b921      	cbnz	r1, 80045be <_realloc_r+0x16>
 80045b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045b8:	4611      	mov	r1, r2
 80045ba:	f7ff bc4b 	b.w	8003e54 <_malloc_r>
 80045be:	b92a      	cbnz	r2, 80045cc <_realloc_r+0x24>
 80045c0:	f7ff fbdc 	bl	8003d7c <_free_r>
 80045c4:	2400      	movs	r4, #0
 80045c6:	4620      	mov	r0, r4
 80045c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045cc:	f000 f81a 	bl	8004604 <_malloc_usable_size_r>
 80045d0:	4285      	cmp	r5, r0
 80045d2:	4606      	mov	r6, r0
 80045d4:	d802      	bhi.n	80045dc <_realloc_r+0x34>
 80045d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80045da:	d8f4      	bhi.n	80045c6 <_realloc_r+0x1e>
 80045dc:	4629      	mov	r1, r5
 80045de:	4640      	mov	r0, r8
 80045e0:	f7ff fc38 	bl	8003e54 <_malloc_r>
 80045e4:	4607      	mov	r7, r0
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d0ec      	beq.n	80045c4 <_realloc_r+0x1c>
 80045ea:	42b5      	cmp	r5, r6
 80045ec:	462a      	mov	r2, r5
 80045ee:	4621      	mov	r1, r4
 80045f0:	bf28      	it	cs
 80045f2:	4632      	movcs	r2, r6
 80045f4:	f7ff ffca 	bl	800458c <memcpy>
 80045f8:	4621      	mov	r1, r4
 80045fa:	4640      	mov	r0, r8
 80045fc:	f7ff fbbe 	bl	8003d7c <_free_r>
 8004600:	463c      	mov	r4, r7
 8004602:	e7e0      	b.n	80045c6 <_realloc_r+0x1e>

08004604 <_malloc_usable_size_r>:
 8004604:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004608:	1f18      	subs	r0, r3, #4
 800460a:	2b00      	cmp	r3, #0
 800460c:	bfbc      	itt	lt
 800460e:	580b      	ldrlt	r3, [r1, r0]
 8004610:	18c0      	addlt	r0, r0, r3
 8004612:	4770      	bx	lr

08004614 <_init>:
 8004614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004616:	bf00      	nop
 8004618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461a:	bc08      	pop	{r3}
 800461c:	469e      	mov	lr, r3
 800461e:	4770      	bx	lr

08004620 <_fini>:
 8004620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004622:	bf00      	nop
 8004624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004626:	bc08      	pop	{r3}
 8004628:	469e      	mov	lr, r3
 800462a:	4770      	bx	lr
